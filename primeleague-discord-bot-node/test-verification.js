const {
    generateVerifyCode,
    createDiscordLink,
    getVerificationStatus,
    verifyDiscordLink,
    createServerNotification
} = require('./src/database/mysql');

async function testVerificationSystem() {
    console.log('üß™ Testando Sistema de Verifica√ß√£o Segura...\n');

    try {
        // 1. Gerar c√≥digo de verifica√ß√£o
        console.log('1Ô∏è‚É£ Gerando c√≥digo de verifica√ß√£o...');
        const code = await generateVerifyCode();
        console.log(`   C√≥digo gerado: ${code}`);
        console.log(`   Tamanho: ${code.length} d√≠gitos\n`);

        // 2. Criar v√≠nculo pendente (simular registro)
        console.log('2Ô∏è‚É£ Criando v√≠nculo pendente...');
        const testDiscordId = '999999999999999999';
        const testUUID = 'test-uuid-1234-5678-9012';
        const testNickname = 'TestPlayer';

        const linkCreated = await createDiscordLink(testDiscordId, testUUID, testNickname, code);
        console.log(`   V√≠nculo criado: ${linkCreated ? '‚úÖ' : '‚ùå'}\n`);

        // 3. Verificar status antes da confirma√ß√£o
        console.log('3Ô∏è‚É£ Verificando status (pendente)...');
        const statusPending = await getVerificationStatus(testDiscordId);
        console.log('   Status:', statusPending);
        console.log(`   Verificado: ${statusPending?.verified ? '‚úÖ' : '‚ùå'}`);
        console.log(`   C√≥digo: ${statusPending?.verify_code || 'N/A'}`);
        console.log(`   Expira: ${statusPending?.verify_expires_at || 'N/A'}\n`);

        // 4. Simular verifica√ß√£o no Minecraft
        console.log('4Ô∏è‚É£ Simulando verifica√ß√£o no Minecraft...');
        const verified = await verifyDiscordLink(testNickname, code);
        console.log(`   Verifica√ß√£o: ${verified ? '‚úÖ Sucesso' : '‚ùå Falhou'}\n`);

        // 5. Verificar status ap√≥s confirma√ß√£o
        console.log('5Ô∏è‚É£ Verificando status (confirmado)...');
        const statusVerified = await getVerificationStatus(testDiscordId);
        console.log('   Status:', statusVerified);
        console.log(`   Verificado: ${statusVerified?.verified ? '‚úÖ' : '‚ùå'}`);
        console.log(`   C√≥digo: ${statusVerified?.verify_code || 'REMOVIDO'}`);
        console.log(`   Expira: ${statusVerified?.verify_expires_at || 'REMOVIDO'}\n`);

        // 6. Criar notifica√ß√£o para servidor
        console.log('6Ô∏è‚É£ Criando notifica√ß√£o para servidor...');
        const notification = await createServerNotification(
            'DISCORD_VERIFY_SUCCESS',
            testNickname,
            { discord_id: testDiscordId, timestamp: Date.now() }
        );
        console.log(`   Notifica√ß√£o criada: ${notification ? '‚úÖ' : '‚ùå'}\n`);

        // 7. Teste de c√≥digo inv√°lido
        console.log('7Ô∏è‚É£ Testando c√≥digo inv√°lido...');
        const invalidVerify = await verifyDiscordLink(testNickname, '999999');
        console.log(`   C√≥digo inv√°lido rejeitado: ${!invalidVerify ? '‚úÖ' : '‚ùå'}\n`);

        console.log('üéâ Testes conclu√≠dos com sucesso!');

    } catch (error) {
        console.error('‚ùå Erro nos testes:', error);
    } finally {
        // Limpar dados de teste
        console.log('\nüßπ Limpando dados de teste...');
        try {
            const { pool } = require('./src/database/mysql');
            await pool.execute('DELETE FROM discord_links WHERE discord_id = ?', ['999999999999999999']);
            await pool.execute('DELETE FROM server_notifications WHERE target_player = ?', ['TestPlayer']);
            console.log('   Limpeza conclu√≠da ‚úÖ');
            process.exit(0);
        } catch (err) {
            console.error('   Erro na limpeza:', err);
            process.exit(1);
        }
    }
}

testVerificationSystem();
