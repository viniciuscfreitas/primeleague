const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { renewAccountSubscription, getPortfolioByDiscordId, getPortfolioStats, checkSubscriptionStatus } = require('../database/mysql');

/**
 * Handler para bot√µes de simula√ß√£o de assinatura
 * Simula o processo de pagamento e ativa√ß√£o de assinaturas
 */
class SubscriptionButtonHandler {
    
    /**
     * Processa intera√ß√µes de bot√µes de assinatura
     */
    static async handleSubscriptionButton(interaction) {
        const { customId } = interaction;
        
        try {
            // Deferir resposta para evitar timeout
            await interaction.deferUpdate();
            
            switch (customId) {
                case 'subscribe_basic':
                    return await this.handleBasicSubscription(interaction);
                    
                case 'subscribe_premium':
                    return await this.handlePremiumSubscription(interaction);
                    
                case 'subscribe_vip':
                    return await this.handleVipSubscription(interaction);
                    
                case 'subscription_help':
                    return await this.handleSubscriptionHelp(interaction);
                    
                case 'contact_support':
                    return await this.handleContactSupport(interaction);
                    
                case 'view_portfolio':
                    return await this.handleViewPortfolio(interaction);
                    
                default:
                    return false; // Bot√£o n√£o tratado
            }
            
        } catch (error) {
            console.error(`[SubscriptionButton] Erro ao processar bot√£o ${customId}:`, error);
            
            const errorEmbed = new EmbedBuilder()
                .setColor('#FF6B6B')
                .setTitle('‚ùå Erro na Simula√ß√£o')
                .setDescription('Ocorreu um erro ao processar sua solicita√ß√£o. Tente novamente.')
                .setTimestamp();
                
            await interaction.editReply({ embeds: [errorEmbed] });
            return true;
        }
    }
    
    /**
     * Simula assinatura b√°sica (30 dias)
     */
    static async handleBasicSubscription(interaction) {
        const discordId = interaction.user.id;
        console.log(`[SUBSCRIPTION-BUTTON] üéÆ Iniciando simula√ß√£o de assinatura b√°sica para Discord ID: ${discordId}`);
        
        // Buscar portf√≥lio do usu√°rio
        const portfolio = await getPortfolioByDiscordId(discordId);
        console.log(`[SUBSCRIPTION-BUTTON] üìã Portf√≥lio encontrado: ${portfolio ? portfolio.length : 0} contas`);
        
        if (!portfolio || portfolio.length === 0) {
            console.log(`[SUBSCRIPTION-BUTTON] ‚ùå Nenhuma conta vinculada para Discord ID: ${discordId}`);
            const errorEmbed = new EmbedBuilder()
                .setColor('#FF6B6B')
                .setTitle('‚ùå Nenhuma Conta Vinculada')
                .setDescription('Voc√™ precisa ter pelo menos uma conta vinculada antes de adquirir uma assinatura.\n\nUse `/registrar <nickname>` para vincular sua conta.')
                .setTimestamp();
                
            await interaction.editReply({ embeds: [errorEmbed] });
            return true;
        }
        
        // Mostrar detalhes do portf√≥lio
        portfolio.forEach((acc, index) => {
            console.log(`[SUBSCRIPTION-BUTTON] üìã Conta ${index + 1}: ${acc.player_name} (ID: ${acc.player_id}, Principal: ${acc.is_primary})`);
        });
        
        // Simular processamento
        const processingEmbed = new EmbedBuilder()
            .setColor('#FFB84D')
            .setTitle('‚è≥ Processando Pagamento...')
            .setDescription('Simulando processamento do pagamento...')
            .addFields({
                name: 'üìã Detalhes da Simula√ß√£o',
                value: 
                    '**Plano:** B√°sico\n' +
                    '**Valor:** R$ 9,90\n' +
                    '**Dura√ß√£o:** 30 dias\n' +
                    '**Conta:** ' + portfolio[0].player_name,
                inline: false
            })
            .setTimestamp();
            
        await interaction.editReply({ embeds: [processingEmbed] });
        
        // Simular delay de processamento
        console.log(`[SUBSCRIPTION-BUTTON] ‚è≥ Aguardando 2 segundos para simular processamento...`);
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Ativar assinatura na conta principal
        const primaryAccount = portfolio.find(acc => acc.is_primary) || portfolio[0];
        console.log(`[SUBSCRIPTION-BUTTON] üéØ Conta selecionada para ativa√ß√£o: ${primaryAccount.player_name} (ID: ${primaryAccount.player_id})`);
        
        console.log(`[SUBSCRIPTION-BUTTON] üîÑ Chamando renewAccountSubscription...`);
        const result = await renewAccountSubscription(primaryAccount.player_id, 30);
        
        console.log(`[SUBSCRIPTION-BUTTON] üìä Resultado da renova√ß√£o:`, result);
        
        if (result.success) {
            console.log(`[SUBSCRIPTION-BUTTON] ‚úÖ Assinatura ativada com sucesso!`);
            console.log(`[SUBSCRIPTION-BUTTON] üìÖ Nova data de expira√ß√£o: ${result.newExpiry.toLocaleDateString('pt-BR')} ${result.newExpiry.toLocaleTimeString('pt-BR')}`);
            
            // Verificar se a assinatura foi persistida corretamente
            console.log(`[SUBSCRIPTION-BUTTON] üîç Verificando persist√™ncia da assinatura...`);
            const verification = await checkSubscriptionStatus(primaryAccount.player_id);
            
            if (verification) {
                console.log(`[SUBSCRIPTION-BUTTON] ‚úÖ Verifica√ß√£o confirmada: assinatura persistida no banco`);
                console.log(`[SUBSCRIPTION-BUTTON] üìä Status final: ${verification.subscription_status} (${verification.days_remaining} dias restantes)`);
            } else {
                console.log(`[SUBSCRIPTION-BUTTON] ‚ö†Ô∏è Aviso: n√£o foi poss√≠vel verificar a persist√™ncia`);
            }
            
            const successEmbed = new EmbedBuilder()
                .setColor('#00FF00')
                .setTitle('‚úÖ Assinatura Ativada!')
                .setDescription('Sua assinatura b√°sica foi ativada com sucesso!')
                .addFields([
                    {
                        name: 'üéÆ Conta Ativada',
                        value: `**${primaryAccount.player_name}**`,
                        inline: true
                    },
                    {
                        name: 'üìÖ V√°lida At√©',
                        value: `**${result.newExpiry.toLocaleDateString('pt-BR')}**`,
                        inline: true
                    },
                    {
                        name: 'üí∞ Valor',
                        value: '**R$ 9,90** (simulado)',
                        inline: true
                    }
                ])
                .addFields({
                    name: 'üéØ Pr√≥ximos Passos',
                    value: 
                        '1. ‚úÖ Conecte no servidor Minecraft\n' +
                        '2. üéÆ Aproveite o acesso completo\n' +
                        '3. üìã Use `/conta` para gerenciar\n' +
                        '4. üîÑ Renove quando necess√°rio',
                    inline: false
                })
                .setFooter({ 
                    text: 'üéâ Bem-vindo ao Prime League!',
                    iconURL: interaction.client.user.displayAvatarURL()
                })
                .setTimestamp();
                
            await interaction.editReply({ embeds: [successEmbed] });
        } else {
            console.log(`[SUBSCRIPTION-BUTTON] ‚ùå Falha ao ativar assinatura: ${result.error}`);
            throw new Error('Falha ao ativar assinatura: ' + result.error);
        }
        
        return true;
    }
    
    /**
     * Simula assinatura premium (30 dias)
     */
    static async handlePremiumSubscription(interaction) {
        const discordId = interaction.user.id;
        
        // Buscar portf√≥lio do usu√°rio
        const portfolio = await getPortfolioByDiscordId(discordId);
        
        if (!portfolio || portfolio.length === 0) {
            const errorEmbed = new EmbedBuilder()
                .setColor('#FF6B6B')
                .setTitle('‚ùå Nenhuma Conta Vinculada')
                .setDescription('Voc√™ precisa ter pelo menos uma conta vinculada antes de adquirir uma assinatura.')
                .setTimestamp();
                
            await interaction.editReply({ embeds: [errorEmbed] });
            return true;
        }
        
        // Simular processamento
        const processingEmbed = new EmbedBuilder()
            .setColor('#FFB84D')
            .setTitle('‚è≥ Processando Pagamento Premium...')
            .setDescription('Simulando processamento do pagamento premium...')
            .addFields({
                name: 'üìã Detalhes da Simula√ß√£o',
                value: 
                    '**Plano:** Premium\n' +
                    '**Valor:** R$ 19,90\n' +
                    '**Dura√ß√£o:** 30 dias\n' +
                    '**Conta:** ' + portfolio[0].player_name,
                inline: false
            })
            .setTimestamp();
            
        await interaction.editReply({ embeds: [processingEmbed] });
        
        // Simular delay de processamento
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Ativar assinatura na conta principal
        const primaryAccount = portfolio.find(acc => acc.is_primary) || portfolio[0];
        const result = await renewAccountSubscription(primaryAccount.player_id, 30);
        
        if (result.success) {
            const successEmbed = new EmbedBuilder()
                .setColor('#4ECDC4')
                .setTitle('‚ö° Assinatura Premium Ativada!')
                .setDescription('Sua assinatura premium foi ativada com sucesso!')
                .addFields([
                    {
                        name: 'üéÆ Conta Ativada',
                        value: `**${primaryAccount.player_name}**`,
                        inline: true
                    },
                    {
                        name: 'üìÖ V√°lida At√©',
                        value: `**${result.newExpiry.toLocaleDateString('pt-BR')}**`,
                        inline: true
                    },
                    {
                        name: 'üí∞ Valor',
                        value: '**R$ 19,90** (simulado)',
                        inline: true
                    }
                ])
                .addFields({
                    name: 'üéØ Benef√≠cios Premium',
                    value: 
                        '‚Ä¢ ‚úÖ 2 contas simult√¢neas\n' +
                        '‚Ä¢ ‚ö° Prioridade no suporte\n' +
                        '‚Ä¢ üé® Cores especiais no chat\n' +
                        '‚Ä¢ üéÆ Acesso completo ao servidor',
                    inline: false
                })
                .setFooter({ 
                    text: '‚ö° Aproveite os benef√≠cios Premium!',
                    iconURL: interaction.client.user.displayAvatarURL()
                })
                .setTimestamp();
                
            await interaction.editReply({ embeds: [successEmbed] });
        } else {
            throw new Error('Falha ao ativar assinatura: ' + result.error);
        }
        
        return true;
    }
    
    /**
     * Simula assinatura VIP (30 dias)
     */
    static async handleVipSubscription(interaction) {
        const discordId = interaction.user.id;
        
        // Buscar portf√≥lio do usu√°rio
        const portfolio = await getPortfolioByDiscordId(discordId);
        
        if (!portfolio || portfolio.length === 0) {
            const errorEmbed = new EmbedBuilder()
                .setColor('#FF6B6B')
                .setTitle('‚ùå Nenhuma Conta Vinculada')
                .setDescription('Voc√™ precisa ter pelo menos uma conta vinculada antes de adquirir uma assinatura.')
                .setTimestamp();
                
            await interaction.editReply({ embeds: [errorEmbed] });
            return true;
        }
        
        // Simular processamento
        const processingEmbed = new EmbedBuilder()
            .setColor('#FFB84D')
            .setTitle('‚è≥ Processando Pagamento VIP...')
            .setDescription('Simulando processamento do pagamento VIP...')
            .addFields({
                name: 'üìã Detalhes da Simula√ß√£o',
                value: 
                    '**Plano:** VIP\n' +
                    '**Valor:** R$ 39,90\n' +
                    '**Dura√ß√£o:** 30 dias\n' +
                    '**Conta:** ' + portfolio[0].player_name,
                inline: false
            })
            .setTimestamp();
            
        await interaction.editReply({ embeds: [processingEmbed] });
        
        // Simular delay de processamento
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Ativar assinatura na conta principal
        const primaryAccount = portfolio.find(acc => acc.is_primary) || portfolio[0];
        const result = await renewAccountSubscription(primaryAccount.player_id, 30);
        
        if (result.success) {
            const successEmbed = new EmbedBuilder()
                .setColor('#FFD700')
                .setTitle('üëë Assinatura VIP Ativada!')
                .setDescription('Sua assinatura VIP foi ativada com sucesso!')
                .addFields([
                    {
                        name: 'üéÆ Conta Ativada',
                        value: `**${primaryAccount.player_name}**`,
                        inline: true
                    },
                    {
                        name: 'üìÖ V√°lida At√©',
                        value: `**${result.newExpiry.toLocaleDateString('pt-BR')}**`,
                        inline: true
                    },
                    {
                        name: 'üí∞ Valor',
                        value: '**R$ 39,90** (simulado)',
                        inline: true
                    }
                ])
                .addFields({
                    name: 'üëë Benef√≠cios VIP',
                    value: 
                        '‚Ä¢ ‚úÖ 5 contas simult√¢neas\n' +
                        '‚Ä¢ üèÜ Suporte VIP 24/7\n' +
                        '‚Ä¢ üé® Comandos especiais\n' +
                        '‚Ä¢ üéÆ Acesso completo ao servidor\n' +
                        '‚Ä¢ ‚≠ê Status VIP exclusivo',
                    inline: false
                })
                .setFooter({ 
                    text: 'üëë Bem-vindo ao clube VIP!',
                    iconURL: interaction.client.user.displayAvatarURL()
                })
                .setTimestamp();
                
            await interaction.editReply({ embeds: [successEmbed] });
        } else {
            throw new Error('Falha ao ativar assinatura: ' + result.error);
        }
        
        return true;
    }
    
    /**
     * Mostra ajuda sobre assinaturas
     */
    static async handleSubscriptionHelp(interaction) {
        const helpEmbed = new EmbedBuilder()
            .setColor('#4ECDC4')
            .setTitle('‚ùì Ajuda - Sistema de Assinaturas')
            .setDescription('Tire suas d√∫vidas sobre nossos planos de assinatura.')
            .addFields([
                {
                    name: 'üéÆ Como Funciona',
                    value: 
                        '1. **Vincule sua conta** com `/registrar`\n' +
                        '2. **Escolha um plano** clicando nos bot√µes\n' +
                        '3. **Confirme o pagamento** (simulado)\n' +
                        '4. **Acesse o servidor** imediatamente',
                    inline: false
                },
                {
                    name: 'üí∞ Planos Dispon√≠veis',
                    value: 
                        '**üéÆ B√°sico:** R$ 9,90/m√™s - 1 conta\n' +
                        '**‚ö° Premium:** R$ 19,90/m√™s - 2 contas\n' +
                        '**üëë VIP:** R$ 39,90/m√™s - 5 contas',
                    inline: false
                },
                {
                    name: '‚ùì D√∫vidas Frequentes',
                    value: 
                        '‚Ä¢ **Cancelamento:** A qualquer momento\n' +
                        '‚Ä¢ **Renova√ß√£o:** Autom√°tica (simulada)\n' +
                        '‚Ä¢ **Suporte:** Entre em contato conosco\n' +
                        '‚Ä¢ **Reembolso:** Em at√© 7 dias',
                    inline: false
                }
            ])
            .setFooter({ 
                text: 'üí° Esta √© uma simula√ß√£o para testes',
                iconURL: interaction.client.user.displayAvatarURL()
            })
            .setTimestamp();
            
        await interaction.editReply({ embeds: [helpEmbed] });
        return true;
    }
    
    /**
     * Abre canal de suporte
     */
    static async handleContactSupport(interaction) {
        const supportEmbed = new EmbedBuilder()
            .setColor('#FF6B35')
            .setTitle('üí¨ Suporte ao Cliente')
            .setDescription('Entre em contato conosco para obter ajuda.')
            .addFields([
                {
                    name: 'üìß Canais de Contato',
                    value: 
                        '**Discord:** Abra um ticket no servidor\n' +
                        '**Email:** suporte@primeleague.com\n' +
                        '**WhatsApp:** (11) 99999-9999',
                    inline: false
                },
                {
                    name: '‚è∞ Hor√°rio de Atendimento',
                    value: 
                        '**Segunda a Sexta:** 9h √†s 18h\n' +
                        '**S√°bados:** 9h √†s 12h\n' +
                        '**Domingos:** Fechado',
                    inline: false
                },
                {
                    name: 'üìã Informa√ß√µes √öteis',
                    value: 
                        '‚Ä¢ Tenha seu Discord ID em m√£os\n' +
                        '‚Ä¢ Descreva o problema detalhadamente\n' +
                        '‚Ä¢ Inclua prints se necess√°rio\n' +
                        '‚Ä¢ Seja paciente, responderemos em breve',
                    inline: false
                }
            ])
            .setFooter({ 
                text: 'üí¨ Estamos aqui para ajudar!',
                iconURL: interaction.client.user.displayAvatarURL()
            })
            .setTimestamp();
            
        await interaction.editReply({ embeds: [supportEmbed] });
        return true;
    }
    
    /**
     * Mostra portf√≥lio do usu√°rio
     */
    static async handleViewPortfolio(interaction) {
        const discordId = interaction.user.id;
        
        try {
            // Buscar informa√ß√µes do portf√≥lio
            const [portfolio, portfolioStats] = await Promise.all([
                getPortfolioByDiscordId(discordId),
                getPortfolioStats(discordId)
            ]);
            
            const portfolioEmbed = new EmbedBuilder()
                .setColor('#4ECDC4')
                .setTitle('üìã Seu Portf√≥lio de Contas')
                .setDescription(`Portf√≥lio de ${interaction.user}`)
                .addFields([
                    {
                        name: 'üìä Estat√≠sticas',
                        value: 
                            `**Total de Contas:** ${portfolioStats.total_accounts}\n` +
                            `**Assinaturas Ativas:** ${portfolioStats.active_subscriptions}\n` +
                            `**Assinaturas Expiradas:** ${portfolioStats.expired_subscriptions}`,
                        inline: true
                    },
                    {
                        name: 'üéØ Status Geral',
                        value: portfolioStats.active_subscriptions > 0 ? 'üü¢ Ativo' : 'üü° Inativo',
                        inline: true
                    }
                ]);
            
            // Adicionar lista de contas se houver
            if (portfolio && portfolio.length > 0) {
                let accountsList = '';
                portfolio.forEach((account, index) => {
                    const isPrimary = account.is_primary;
                    const status = account.subscription_status === 'ACTIVE' ? 'üü¢ Ativa' : 
                                 account.subscription_status === 'EXPIRED' ? 'üî¥ Expirada' : '‚ö™ Nunca Assinou';
                    const primaryIcon = isPrimary ? 'üëë' : 'üë§';
                    
                    accountsList += `${primaryIcon} **${account.player_name}**${isPrimary ? ' *(Principal)*' : ''}\n`;
                    accountsList += `‚îî ${status}\n`;
                    
                    if (account.days_remaining > 0) {
                        accountsList += `‚îî ‚è∞ ${account.days_remaining} dias restantes\n`;
                    }
                    
                    if (index < portfolio.length - 1) {
                        accountsList += '\n';
                    }
                });
                
                portfolioEmbed.addFields({
                    name: 'üéÆ Contas Vinculadas',
                    value: accountsList,
                    inline: false
                });
            } else {
                portfolioEmbed.addFields({
                    name: 'üéÆ Contas Vinculadas',
                    value: 'Nenhuma conta vinculada ainda.\nUse `/registrar <nickname>` para vincular sua primeira conta.',
                    inline: false
                });
            }
            
            portfolioEmbed.setFooter({ 
                text: 'üìã Gerencie suas contas com /conta',
                iconURL: interaction.client.user.displayAvatarURL()
            })
            .setTimestamp();
            
            await interaction.editReply({ embeds: [portfolioEmbed] });
            
        } catch (error) {
            console.error('[Portfolio] Erro ao buscar portf√≥lio:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setColor('#FF6B6B')
                .setTitle('‚ùå Erro ao Carregar Portf√≥lio')
                .setDescription('Ocorreu um erro ao carregar seu portf√≥lio. Tente novamente.')
                .setTimestamp();
                
            await interaction.editReply({ embeds: [errorEmbed] });
        }
        
        return true;
    }
}

module.exports = SubscriptionButtonHandler;
