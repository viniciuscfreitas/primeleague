const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { getDonorInfoFromCore, pool } = require('../database/mysql');

/**
 * Handler para bot√µes de simula√ß√£o de upgrade de doador
 * Simula o processo de upgrade de tier de doador
 */
class DonorButtonHandler {
    
    /**
     * Processa intera√ß√µes de bot√µes de upgrade de doador
     */
    static async handleDonorButton(interaction) {
        const { customId } = interaction;
        
        try {
            // Deferir resposta para evitar timeout
            await interaction.deferUpdate();
            
            switch (customId) {
                case 'upgrade_to_1':
                    return await this.handleUpgradeToTier1(interaction);
                    
                case 'upgrade_to_2':
                    return await this.handleUpgradeToTier2(interaction);
                    
                case 'donor_help':
                    return await this.handleDonorHelp(interaction);
                    
                case 'donor_benefits':
                    return await this.handleDonorBenefits(interaction);
                    
                default:
                    return false; // Bot√£o n√£o tratado
            }
            
        } catch (error) {
            console.error(`[DonorButton] Erro ao processar bot√£o ${customId}:`, error);
            
            const errorEmbed = new EmbedBuilder()
                .setColor('#FF6B6B')
                .setTitle('‚ùå Erro na Simula√ß√£o')
                .setDescription('Ocorreu um erro ao processar sua solicita√ß√£o. Tente novamente.')
                .setTimestamp();
                
            await interaction.editReply({ embeds: [errorEmbed] });
            return true;
        }
    }
    
    /**
     * Atualiza o donor tier no banco de dados (por Discord ID)
     */
    static async updateDonorTierInDatabase(discordId, newTier) {
        try {
            console.log(`[DONOR-BUTTON] üîÑ Atualizando donor tier para ${newTier} no banco...`);
            
            // Verificar se existe pelo menos uma conta vinculada
            const [discordLinks] = await pool.execute(`
                SELECT dl.player_id, pd.name 
                FROM discord_links dl 
                JOIN player_data pd ON dl.player_id = pd.player_id 
                WHERE dl.discord_id = ? AND dl.verified = TRUE
                LIMIT 1
            `, [discordId]);
            
            if (discordLinks.length === 0) {
                console.log(`[DONOR-BUTTON] ‚ùå Nenhum player vinculado encontrado para Discord ID: ${discordId}`);
                return { success: false, error: 'Nenhuma conta vinculada encontrada.' };
            }
            
            const playerName = discordLinks[0].name;
            console.log(`[DONOR-BUTTON] üìã Conta principal: ${playerName}`);
            
            // Calcular data de expira√ß√£o (30 dias)
            const expiryDate = new Date();
            expiryDate.setDate(expiryDate.getDate() + 30);
            
            // Atualizar donor_tier na tabela discord_users (por Discord ID)
            const [result] = await pool.execute(`
                INSERT INTO discord_users (discord_id, donor_tier, donor_tier_expires_at, updated_at)
                VALUES (?, ?, ?, NOW())
                ON DUPLICATE KEY UPDATE 
                    donor_tier = VALUES(donor_tier),
                    donor_tier_expires_at = VALUES(donor_tier_expires_at),
                    updated_at = NOW()
            `, [discordId, newTier, expiryDate]);
            
            if (result.affectedRows > 0 || result.insertId > 0) {
                console.log(`[DONOR-BUTTON] ‚úÖ Donor tier atualizado com sucesso para Discord ID: ${discordId}`);
                console.log(`[DONOR-BUTTON] üìÖ Expira em: ${expiryDate.toLocaleDateString('pt-BR')}`);
                
                // Nota: donor_tier agora est√° centralizado em discord_users
                // N√£o precisamos mais atualizar player_data
                console.log(`[DONOR-BUTTON] ‚úÖ Donor tier centralizado em discord_users`);
                
                return { 
                    success: true, 
                    playerName: playerName,
                    newTier: newTier,
                    expiryDate: expiryDate
                };
            } else {
                console.log(`[DONOR-BUTTON] ‚ùå Falha ao atualizar donor tier`);
                return { success: false, error: 'Falha ao atualizar no banco.' };
            }
            
        } catch (error) {
            console.error('[DONOR-BUTTON] ‚ùå Erro ao atualizar donor tier:', error);
            return { success: false, error: 'Erro interno do banco.' };
        }
    }
    
    /**
     * Simula upgrade para Tier 1 (Apoiador)
     */
    static async handleUpgradeToTier1(interaction) {
        const discordId = interaction.user.id;
        console.log(`[DONOR-BUTTON] üéÆ Iniciando simula√ß√£o de upgrade para Tier 1 para Discord ID: ${discordId}`);
        
        // Simular processamento
        const processingEmbed = new EmbedBuilder()
            .setColor('#FFB84D')
            .setTitle('‚è≥ Processando Upgrade...')
            .setDescription('Simulando processamento do upgrade para Apoiador...')
            .addFields({
                name: 'üìã Detalhes da Simula√ß√£o',
                value: 
                    '**Tier Atual:** Player (0)\n' +
                    '**Novo Tier:** Apoiador (1)\n' +
                    '**Valor:** R$ 29,90\n' +
                    '**Benef√≠cio:** 2 contas simult√¢neas',
                inline: false
            })
            .setTimestamp();
            
        await interaction.editReply({ embeds: [processingEmbed] });
        
        // Simular delay de processamento
        console.log(`[DONOR-BUTTON] ‚è≥ Aguardando 2 segundos para simular processamento...`);
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // ATUALIZAR BANCO DE DADOS REALMENTE
        console.log(`[DONOR-BUTTON] üîÑ Executando upgrade real no banco...`);
        const dbResult = await this.updateDonorTierInDatabase(discordId, 1);
        
        if (!dbResult.success) {
            console.log(`[DONOR-BUTTON] ‚ùå Falha no upgrade: ${dbResult.error}`);
            const errorEmbed = new EmbedBuilder()
                .setColor('#FF6B6B')
                .setTitle('‚ùå Erro no Upgrade')
                .setDescription(`Falha ao processar upgrade: ${dbResult.error}`)
                .setTimestamp();
            await interaction.editReply({ embeds: [errorEmbed] });
            return true;
        }
        
        console.log(`[DONOR-BUTTON] ‚úÖ Upgrade real conclu√≠do com sucesso!`);
        
        const successEmbed = new EmbedBuilder()
            .setColor('#4ECDC4')
            .setTitle('üéâ Upgrade Conclu√≠do!')
            .setDescription(`Parab√©ns, ${dbResult.playerName}! Voc√™ agora √© um **Apoiador** do Prime League!`)
            .addFields([
                {
                    name: 'üèÜ Novo Status',
                    value: '**Apoiador (Tier 1)**',
                    inline: true
                },
                {
                    name: 'üí∞ Valor',
                    value: '**R$ 29,90** (simulado)',
                    inline: true
                },
                {
                    name: 'üìÖ Expira em',
                    value: `<t:${Math.floor(dbResult.expiryDate.getTime() / 1000)}:F>`,
                    inline: true
                }
            ])
            .addFields({
                name: 'üéØ Novos Benef√≠cios',
                value: 
                    '‚Ä¢ ‚úÖ **2 contas simult√¢neas**\n' +
                    '‚Ä¢ üé® Cores especiais no chat\n' +
                    '‚Ä¢ ‚ö° Prioridade no suporte\n' +
                    '‚Ä¢ üéÆ Acesso completo ao servidor\n' +
                    '‚Ä¢ üèÜ Status de Apoiador',
                inline: false
            })
            .addFields({
                name: 'üéÆ Pr√≥ximos Passos',
                value: 
                    '1. ‚úÖ Use `/registrar` para vincular mais contas\n' +
                    '2. üéÆ Aproveite os benef√≠cios de Apoiador\n' +
                    '3. üìã Use `/conta` para gerenciar seu portf√≥lio\n' +
                    '4. üîÑ Renove quando necess√°rio',
                inline: false
            })
            .setFooter({ 
                text: 'üéâ Obrigado por apoiar o Prime League!',
                iconURL: interaction.client.user.displayAvatarURL()
            })
            .setTimestamp();
            
        await interaction.editReply({ embeds: [successEmbed] });
        return true;
    }
    
    /**
     * Simula upgrade para Tier 2 (Patrocinador)
     */
    static async handleUpgradeToTier2(interaction) {
        const discordId = interaction.user.id;
        console.log(`[DONOR-BUTTON] üéÆ Iniciando simula√ß√£o de upgrade para Tier 2 para Discord ID: ${discordId}`);
        
        // Simular processamento
        const processingEmbed = new EmbedBuilder()
            .setColor('#FFB84D')
            .setTitle('‚è≥ Processando Upgrade VIP...')
            .setDescription('Simulando processamento do upgrade para Patrocinador...')
            .addFields({
                name: 'üìã Detalhes da Simula√ß√£o',
                value: 
                    '**Tier Atual:** Player (0)\n' +
                    '**Novo Tier:** Patrocinador (2)\n' +
                    '**Valor:** R$ 59,90\n' +
                    '**Benef√≠cio:** 5 contas simult√¢neas',
                inline: false
            })
            .setTimestamp();
            
        await interaction.editReply({ embeds: [processingEmbed] });
        
        // Simular delay de processamento
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // ATUALIZAR BANCO DE DADOS REALMENTE
        console.log(`[DONOR-BUTTON] üîÑ Executando upgrade VIP real no banco...`);
        const dbResult = await this.updateDonorTierInDatabase(discordId, 2);
        
        if (!dbResult.success) {
            console.log(`[DONOR-BUTTON] ‚ùå Falha no upgrade VIP: ${dbResult.error}`);
            const errorEmbed = new EmbedBuilder()
                .setColor('#FF6B6B')
                .setTitle('‚ùå Erro no Upgrade VIP')
                .setDescription(`Falha ao processar upgrade: ${dbResult.error}`)
                .setTimestamp();
            await interaction.editReply({ embeds: [errorEmbed] });
            return true;
        }
        
        console.log(`[DONOR-BUTTON] ‚úÖ Upgrade VIP real conclu√≠do com sucesso!`);
        
        const successEmbed = new EmbedBuilder()
            .setColor('#FFD700')
            .setTitle('üëë Upgrade VIP Conclu√≠do!')
            .setDescription(`Parab√©ns, ${dbResult.playerName}! Voc√™ agora √© um **Patrocinador** do Prime League!`)
            .addFields([
                {
                    name: 'üëë Novo Status',
                    value: '**Patrocinador (Tier 2)**',
                    inline: true
                },
                {
                    name: 'üí∞ Valor',
                    value: '**R$ 59,90** (simulado)',
                    inline: true
                },
                {
                    name: 'üìÖ Expira em',
                    value: `<t:${Math.floor(dbResult.expiryDate.getTime() / 1000)}:F>`,
                    inline: true
                }
            ])
            .addFields({
                name: 'üëë Benef√≠cios VIP',
                value: 
                    '‚Ä¢ ‚úÖ **5 contas simult√¢neas**\n' +
                    '‚Ä¢ üèÜ Suporte VIP 24/7\n' +
                    '‚Ä¢ üé® Comandos especiais\n' +
                    '‚Ä¢ üéÆ Acesso completo ao servidor\n' +
                    '‚Ä¢ ‚≠ê Status VIP exclusivo\n' +
                    '‚Ä¢ üéÅ Benef√≠cios exclusivos',
                inline: false
            })
            .addFields({
                name: 'üéÆ Pr√≥ximos Passos',
                value: 
                    '1. ‚úÖ Use `/registrar` para vincular mais contas\n' +
                    '2. üëë Aproveite os benef√≠cios VIP\n' +
                    '3. üìã Use `/conta` para gerenciar seu portf√≥lio\n' +
                    '4. üîÑ Renove quando necess√°rio',
                inline: false
            })
            .setFooter({ 
                text: 'üëë Bem-vindo ao clube VIP!',
                iconURL: interaction.client.user.displayAvatarURL()
            })
            .setTimestamp();
            
        await interaction.editReply({ embeds: [successEmbed] });
        return true;
    }
    
    /**
     * Mostra ajuda sobre o sistema de doadores
     */
    static async handleDonorHelp(interaction) {
        const helpEmbed = new EmbedBuilder()
            .setColor('#4ECDC4')
            .setTitle('‚ùì Ajuda - Sistema de Apoiadores')
            .setDescription('Tire suas d√∫vidas sobre nosso sistema de apoiadores.')
            .addFields([
                {
                    name: 'üéØ Como Funciona',
                    value: 
                        '1. **Escolha um tier** clicando nos bot√µes\n' +
                        '2. **Confirme o pagamento** (simulado)\n' +
                        '3. **Ganhe benef√≠cios** imediatamente\n' +
                        '4. **Vincule mais contas** conforme seu tier',
                    inline: false
                },
                {
                    name: 'üèÜ Tiers Dispon√≠veis',
                    value: 
                        '**üë§ Player (Tier 0):** 1 conta - Gratuito\n' +
                        '**üéâ Apoiador (Tier 1):** 2 contas - R$ 29,90\n' +
                        '**üëë Patrocinador (Tier 2):** 5 contas - R$ 59,90',
                    inline: false
                },
                {
                    name: '‚ùì D√∫vidas Frequentes',
                    value: 
                        '‚Ä¢ **Upgrade:** A qualquer momento\n' +
                        '‚Ä¢ **Downgrade:** No pr√≥ximo ciclo\n' +
                        '‚Ä¢ **Contas:** Vinculadas individualmente\n' +
                        '‚Ä¢ **Benef√≠cios:** Ativos imediatamente',
                    inline: false
                }
            ])
            .setFooter({ 
                text: 'üí° Esta √© uma simula√ß√£o para testes',
                iconURL: interaction.client.user.displayAvatarURL()
            })
            .setTimestamp();
            
        await interaction.editReply({ embeds: [helpEmbed] });
        return true;
    }
    
    /**
     * Mostra benef√≠cios detalhados dos doadores
     */
    static async handleDonorBenefits(interaction) {
        const benefitsEmbed = new EmbedBuilder()
            .setColor('#FFD700')
            .setTitle('üèÜ Benef√≠cios dos Apoiadores')
            .setDescription('Conhe√ßa todos os benef√≠cios exclusivos para nossos apoiadores.')
            .addFields([
                {
                    name: 'üë§ Player (Tier 0)',
                    value: 
                        '‚Ä¢ ‚úÖ 1 conta simult√¢nea\n' +
                        '‚Ä¢ üéÆ Acesso b√°sico ao servidor\n' +
                        '‚Ä¢ üìã Suporte padr√£o',
                    inline: true
                },
                {
                    name: 'üéâ Apoiador (Tier 1)',
                    value: 
                        '‚Ä¢ ‚úÖ 2 contas simult√¢neas\n' +
                        '‚Ä¢ üé® Cores especiais no chat\n' +
                        '‚Ä¢ ‚ö° Prioridade no suporte\n' +
                        '‚Ä¢ üèÜ Status de Apoiador',
                    inline: true
                },
                {
                    name: 'üëë Patrocinador (Tier 2)',
                    value: 
                        '‚Ä¢ ‚úÖ 5 contas simult√¢neas\n' +
                        '‚Ä¢ üèÜ Suporte VIP 24/7\n' +
                        '‚Ä¢ üé® Comandos especiais\n' +
                        '‚Ä¢ ‚≠ê Status VIP exclusivo',
                    inline: true
                }
            ])
            .addFields({
                name: 'üéÅ Benef√≠cios Exclusivos',
                value: 
                    '‚Ä¢ üéÆ **Contas Simult√¢neas:** Gerencie m√∫ltiplas contas\n' +
                    '‚Ä¢ üé® **Personaliza√ß√£o:** Cores e comandos especiais\n' +
                    '‚Ä¢ ‚ö° **Suporte Priorit√°rio:** Atendimento VIP\n' +
                    '‚Ä¢ üèÜ **Status Exclusivo:** Reconhecimento especial\n' +
                    '‚Ä¢ üéÅ **Benef√≠cios Futuros:** Novos recursos exclusivos',
                inline: false
            })
            .setFooter({ 
                text: 'üèÜ Apoie o Prime League e ganhe benef√≠cios exclusivos!',
                iconURL: interaction.client.user.displayAvatarURL()
            })
            .setTimestamp();
            
        await interaction.editReply({ embeds: [benefitsEmbed] });
        return true;
    }
}

module.exports = DonorButtonHandler;
