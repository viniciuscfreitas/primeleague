const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const axios = require('axios');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('vincular')
        .setDescription('Vincular conta usando c√≥digo de backup')
        .addStringOption(option =>
            option.setName('nickname')
                .setDescription('Nickname do jogador para vincular')
                .setRequired(true))
        .addStringOption(option =>
            option.setName('codigo')
                .setDescription('C√≥digo de backup para vincular')
                .setRequired(true)),

    async execute(interaction) {
        try {
            // Verificar se √© DM
            if (!interaction.channel.type === 0) { // 0 = DM
                await interaction.reply({
                    content: '‚ùå **Este comando s√≥ pode ser usado em mensagem privada (DM) por seguran√ßa.**',
                    ephemeral: true
                });
                return;
            }

            const userId = interaction.user.id;
            const nickname = interaction.options.getString('nickname');
            const codigo = interaction.options.getString('codigo');

            // Mostrar loading
            await interaction.deferReply({ ephemeral: true });

            // Validar formato do c√≥digo (8 caracteres alfanum√©ricos)
            if (!/^[A-Z0-9]{8}$/.test(codigo)) {
                await interaction.editReply({
                    content: '‚ùå **C√≥digo inv√°lido. O c√≥digo deve ter 8 caracteres (letras e n√∫meros).**',
                    ephemeral: true
                });
                return;
            }

            // Executar re-vincula√ß√£o transacional
            try {
                const response = await axios.post('http://localhost:8080/api/v1/recovery/complete-relink', {
                    playerName: nickname,
                    relinkCode: codigo,
                    newDiscordId: userId,
                    ipAddress: "127.0.0.1" // IP simulado para teste
                }, {
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${process.env.API_TOKEN}`
                    }
                });

                if (response.data.success) {
                    // Criar embed de sucesso
                    const successEmbed = new EmbedBuilder()
                        .setTitle('‚úÖ Conta Vinculada com Sucesso!')
                        .setDescription(`**Sua conta foi vinculada ao Discord!**`)
                        .setColor(0x00FF00)
                        .addFields(
                            { 
                                name: 'üë§ Jogador', 
                                value: `\`${nickname}\`` 
                            },
                            { 
                                name: 'üîó Discord', 
                                value: `<@${userId}>` 
                            },
                            { 
                                name: '‚úÖ Status', 
                                value: '**Vincula√ß√£o ativa**' 
                            }
                        )
                        .addFields(
                            { 
                                name: 'üéÆ Pr√≥ximos Passos', 
                                value: '‚Ä¢ Entre no servidor Minecraft\n‚Ä¢ Sua assinatura foi transferida automaticamente\n‚Ä¢ Use `/conta` para verificar status' 
                            },
                            { 
                                name: 'üîí Seguran√ßa', 
                                value: '‚Ä¢ C√≥digo usado foi invalidado\n‚Ä¢ V√≠nculo protegido por autentica√ß√£o\n‚Ä¢ Auditoria completa registrada' 
                            }
                        )
                        .setFooter({ text: 'PrimeLeague - Sistema de Vincula√ß√£o' })
                        .setTimestamp();

                    await interaction.editReply({
                        embeds: [successEmbed],
                        ephemeral: true
                    });

                } else {
                    throw new Error(response.data.message || 'Erro na re-vincula√ß√£o');
                }

            } catch (error) {
                console.error('[VINCULAR] Erro na re-vincula√ß√£o:', error);
                
                let errorMessage = '‚ùå **Erro ao vincular conta.**';
                
                if (error.response) {
                    if (error.response.status === 400) {
                        if (error.response.data.message.includes('inv√°lido ou expirado')) {
                            errorMessage = '‚ùå **C√≥digo inv√°lido ou expirado. Verifique o c√≥digo e tente novamente.**';
                        } else if (error.response.data.message.includes('n√£o encontrado')) {
                            errorMessage = '‚ùå **Jogador n√£o encontrado. Verifique o nickname.**';
                        } else if (error.response.data.message.includes('n√£o possui v√≠nculo')) {
                            errorMessage = '‚ùå **Este jogador n√£o possui v√≠nculo Discord ativo.**';
                        } else {
                            errorMessage = `‚ùå **Erro de valida√ß√£o: ${error.response.data.message}**`;
                        }
                    } else if (error.response.status === 404) {
                        errorMessage = '‚ùå **Jogador n√£o encontrado. Verifique o nickname.**';
                    } else {
                        errorMessage = `‚ùå **Erro do servidor: ${error.response.data?.message || 'Erro desconhecido'}**`;
                    }
                }

                await interaction.editReply({
                    content: errorMessage,
                    ephemeral: true
                });
            }

        } catch (error) {
            console.error('[VINCULAR] Erro:', error);
            await interaction.editReply({
                content: '‚ùå **Erro interno do sistema. Tente novamente mais tarde.**',
                ephemeral: true
            });
        }
    }
};
