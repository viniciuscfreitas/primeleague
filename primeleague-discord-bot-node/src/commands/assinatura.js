const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { getPortfolioByDiscordId, getPlayerAccountInfo } = require('../database/mysql');

/**
 * Comando /assinatura - Gerenciamento de Assinaturas
 * 
 * Este comando permite que usu√°rios adquiram e gerenciem suas assinaturas
 * para acessar o servidor Prime League.
 */

module.exports = {
    data: new SlashCommandBuilder()
        .setName('assinatura')
        .setDescription('üíé Adquirir ou gerenciar sua assinatura do Prime League'),

    async execute(interaction) {
        await interaction.deferReply({ ephemeral: true });

        try {
            const discordId = interaction.user.id;

            // 1. Verificar se o usu√°rio tem contas verificadas
            const portfolio = await getPortfolioByDiscordId(discordId);
            
            if (!portfolio || portfolio.length === 0) {
                const embed = new EmbedBuilder()
                    .setColor('#FF6B6B')
                    .setTitle('‚ùå Nenhuma Conta Verificada')
                    .setDescription(
                        'Voc√™ ainda n√£o possui contas verificadas.\n\n' +
                        '**Como come√ßar:**\n' +
                        '1. Use `/registrar <nickname>` para vincular sua conta\n' +
                        '2. Complete a verifica√ß√£o no servidor Minecraft\n' +
                        '3. Retorne aqui para adquirir sua assinatura'
                    )
                    .setTimestamp();

                return interaction.editReply({ embeds: [embed] });
            }

            // 2. Verificar se j√° tem assinatura ativa
            const hasActiveSubscription = portfolio.some(account => 
                account.subscription_status === 'ACTIVE'
            );

            if (hasActiveSubscription) {
                // Buscar informa√ß√µes detalhadas da assinatura compartilhada
                const activeAccount = portfolio.find(account => account.subscription_status === 'ACTIVE');
                const daysRemaining = activeAccount ? activeAccount.days_remaining : 0;
                const expiryDate = activeAccount ? new Date(activeAccount.subscription_expires_at) : null;
                
                const embed = new EmbedBuilder()
                    .setColor('#4ECDC4')
                    .setTitle('‚úÖ Assinatura Compartilhada Ativa')
                    .setDescription(
                        'Voc√™ j√° possui uma **assinatura compartilhada** ativa!\n\n' +
                        '**üìä Status da Assinatura:**\n' +
                        `‚Ä¢ **Status:** Ativa\n` +
                        `‚Ä¢ **Dias Restantes:** ${daysRemaining} dias\n` +
                        `‚Ä¢ **Expira em:** ${expiryDate ? expiryDate.toLocaleDateString('pt-BR') : 'N/A'}\n\n` +
                        '**üéÆ Contas Vinculadas:**\n' +
                        `‚Ä¢ **Total:** ${portfolio.length} conta${portfolio.length > 1 ? 's' : ''}\n` +
                        portfolio.map(acc => `‚Ä¢ ${acc.player_name} (${acc.subscription_status === 'ACTIVE' ? '‚úÖ' : '‚ùå'})`).join('\n') + '\n\n' +
                        '**üí° Como Funciona:**\n' +
                        '‚Ä¢ Sua assinatura √© **compartilhada** entre todas as contas\n' +
                        '‚Ä¢ Todas as contas vinculadas t√™m acesso ao servidor\n' +
                        '‚Ä¢ Voc√™ pode adicionar mais contas sem custo adicional'
                    )
                    .addFields({
                        name: 'üîß A√ß√µes Dispon√≠veis',
                        value: 
                            '‚Ä¢ `/conta` - Gerenciar seu portf√≥lio completo\n' +
                            '‚Ä¢ `/registrar <nickname>` - Adicionar mais contas\n' +
                            '‚Ä¢ `/upgrade-doador` - Ver op√ß√µes de upgrade\n' +
                            '‚Ä¢ `/assinatura` - Renovar quando necess√°rio',
                        inline: false
                    })
                    .setFooter({ 
                        text: 'üí° Sua assinatura √© compartilhada automaticamente com todas as contas vinculadas',
                        iconURL: interaction.client.user.displayAvatarURL()
                    })
                    .setTimestamp();

                return interaction.editReply({ embeds: [embed] });
            }

            // 3. Mostrar planos de assinatura compartilhada
            const embed = new EmbedBuilder()
                .setColor('#FFD93D')
                .setTitle('üíé Assinatura Compartilhada - Prime League')
                .setDescription(
                    `**Jogador:** ${interaction.user}\n` +
                    `**Contas Verificadas:** ${portfolio.length}\n\n` +
                    '**üéØ Sistema de Assinatura Compartilhada:**\n' +
                    '‚Ä¢ Uma √∫nica assinatura para **todas** suas contas\n' +
                    '‚Ä¢ Economia e simplicidade\n' +
                    '‚Ä¢ Adicione quantas contas quiser sem custo extra\n\n' +
                    '**Escolha o plano ideal para voc√™:**'
                )
                .addFields([
                    {
                        name: 'üéÆ Plano B√°sico',
                        value: 
                            '**Pre√ßo:** R$ 9,90/m√™s\n' +
                            '**Benef√≠cios:**\n' +
                            '‚Ä¢ Acesso completo ao servidor\n' +
                            '‚Ä¢ **Todas** suas contas vinculadas\n' +
                            '‚Ä¢ Suporte b√°sico\n' +
                            '‚Ä¢ Sem an√∫ncios\n' +
                            '‚Ä¢ **Compartilhado** automaticamente',
                        inline: true
                    },
                    {
                        name: '‚ö° Plano Premium',
                        value: 
                            '**Pre√ßo:** R$ 19,90/m√™s\n' +
                            '**Benef√≠cios:**\n' +
                            '‚Ä¢ Tudo do B√°sico\n' +
                            '‚Ä¢ **Todas** suas contas vinculadas\n' +
                            '‚Ä¢ Prioridade no suporte\n' +
                            '‚Ä¢ Cores especiais no chat\n' +
                            '‚Ä¢ **Compartilhado** automaticamente',
                        inline: true
                    },
                    {
                        name: 'üëë Plano VIP',
                        value: 
                            '**Pre√ßo:** R$ 39,90/m√™s\n' +
                            '**Benef√≠cios:**\n' +
                            '‚Ä¢ Tudo do Premium\n' +
                            '‚Ä¢ **Todas** suas contas vinculadas\n' +
                            '‚Ä¢ Suporte VIP 24/7\n' +
                            '‚Ä¢ Comandos especiais\n' +
                            '‚Ä¢ **Compartilhado** automaticamente',
                        inline: true
                    }
                ])
                .addFields({
                    name: 'üìù Informa√ß√µes Importantes',
                    value: 
                        '‚Ä¢ **Dura√ß√£o:** Todas as assinaturas s√£o v√°lidas por 30 dias\n' +
                        '‚Ä¢ **Compartilhamento:** Uma assinatura para **todas** suas contas\n' +
                        '‚Ä¢ **Pagamento:** PIX, cart√£o de cr√©dito e outros m√©todos\n' +
                        '‚Ä¢ **Ativa√ß√£o:** Imediata ap√≥s confirma√ß√£o do pagamento\n' +
                        '‚Ä¢ **Cancelamento:** A qualquer momento\n' +
                        '‚Ä¢ **Suporte:** Entre em contato conosco para d√∫vidas',
                    inline: false
                })
                .setFooter({ 
                    text: 'üí° Sistema Compartilhado: Uma assinatura para todas suas contas!',
                    iconURL: interaction.client.user.displayAvatarURL()
                })
                .setTimestamp();

            // 4. Criar bot√µes de a√ß√£o
            const buttons = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('subscribe_basic')
                        .setLabel('üéÆ Plano B√°sico - R$ 9,90')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId('subscribe_premium')
                        .setLabel('‚ö° Plano Premium - R$ 19,90')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId('subscribe_vip')
                        .setLabel('üëë Plano VIP - R$ 39,90')
                        .setStyle(ButtonStyle.Primary)
                );

            const supportButtons = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('subscription_help')
                        .setLabel('‚ùì Ajuda')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('contact_support')
                        .setLabel('üí¨ Suporte')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('view_portfolio')
                        .setLabel('üìã Meu Portf√≥lio')
                        .setStyle(ButtonStyle.Secondary)
                );

            // 5. Enviar resposta
            await interaction.editReply({ 
                embeds: [embed], 
                components: [buttons, supportButtons]
            });

        } catch (error) {
            console.error('Erro no comando /primeira-conta:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setColor('#FF6B6B')
                .setTitle('‚ùå Erro Interno')
                .setDescription(
                    'Ocorreu um erro ao carregar os planos de assinatura.\n\n' +
                    'Tente novamente em instantes ou entre em contato com a administra√ß√£o.'
                )
                .setTimestamp();

            return interaction.editReply({ embeds: [errorEmbed] });
        }
    },
};
