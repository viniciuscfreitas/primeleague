const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, SelectMenuBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const {
    getClanSubscription,
    getSubscriptionTiers,
    getDiscordLinksById,
    getClanMemberCount
} = require('../database/mysql');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('renovar')
        .setDescription('Renova ou faz upgrade da assinatura do seu cl√£'),

    async execute(interaction) {
        await interaction.deferReply({ ephemeral: true });

        try {
            const discordId = interaction.user.id;

            // 1. Buscar informa√ß√µes do cl√£
            const [subscription, availableTiers, clanMembers] = await Promise.all([
                getClanSubscription(discordId),
                getSubscriptionTiers(),
                getDiscordLinksById(discordId)
            ]);

            // 2. Verificar se tem cl√£ registrado
            if (!clanMembers || clanMembers.length === 0) {
                const embed = new EmbedBuilder()
                    .setColor('#FF6B6B')
                    .setTitle('‚ùå Cl√£ N√£o Registrado')
                    .setDescription(
                        'Voc√™ ainda n√£o possui um cl√£ registrado.\n\n' +
                        '**Como come√ßar:**\n' +
                        '1. Use `/registrar <nickname>` para vincular sua primeira conta\n' +
                        '2. Complete a verifica√ß√£o no servidor\n' +
                        '3. Retorne aqui para escolher um plano de assinatura'
                    )
                    .setTimestamp();

                return interaction.editReply({ embeds: [embed] });
            }

            // 3. Determinar situa√ß√£o atual
            const hasActiveSubscription = subscription && new Date(subscription.expires_at) > new Date();
            const currentTier = subscription?.subscription_tier;
            const memberCount = clanMembers.length;

            // 4. Criar embed principal
            const embed = new EmbedBuilder()
                .setColor('#4ECDC4')
                .setTitle('üíé Sistema de Assinaturas Prime League')
                .setDescription(
                    `**L√≠der do Cl√£:** ${interaction.user}\n` +
                    `**Membros Vinculados:** ${memberCount} conta(s)\n\n` +
                    '**Escolha o plano ideal para seu cl√£:**'
                )
                .setTimestamp();

            // 5. Adicionar status atual se houver assinatura
            if (hasActiveSubscription) {
                const expiresAt = new Date(subscription.expires_at);
                const daysRemaining = Math.ceil((expiresAt - new Date()) / (1000 * 60 * 60 * 24));
                
                embed.addFields({
                    name: 'üìã Assinatura Atual',
                    value: 
                        `**Plano:** ${currentTier}\n` +
                        `**Slots:** ${subscription.max_simultaneous_logins}\n` +
                        `**Expira em:** ${daysRemaining} dias\n` +
                        `**Renova√ß√£o:** Estende por +30 dias`,
                    inline: false
                });
            }

            // 6. Adicionar descri√ß√£o dos planos
            let plansDescription = '';
            availableTiers.forEach(tier => {
                const isCurrentPlan = currentTier === tier.tier_name;
                const planIcon = isCurrentPlan ? 'üëë' : 'üí∞';
                const statusText = isCurrentPlan ? ' *(Plano Atual)*' : '';
                
                plansDescription += 
                    `${planIcon} **${tier.display_name}**${statusText}\n` +
                    `‚îî ${tier.max_slots} slots simult√¢neos ‚Ä¢ R$ ${tier.price_brl.toFixed(2)}\n` +
                    `‚îî ${tier.description}\n\n`;
            });

            embed.addFields({
                name: 'üíé Planos Dispon√≠veis',
                value: plansDescription,
                inline: false
            });

            // 7. Informa√ß√µes adicionais
            embed.addFields({
                name: 'üìù Informa√ß√µes Importantes',
                value: 
                    '‚Ä¢ **Slots Simult√¢neos:** Quantos membros podem estar online ao mesmo tempo\n' +
                    '‚Ä¢ **Dura√ß√£o:** Todas as assinaturas s√£o v√°lidas por 30 dias\n' +
                    '‚Ä¢ **Upgrade:** Voc√™ pode fazer upgrade a qualquer momento\n' +
                    '‚Ä¢ **Pagamento:** PIX, cart√£o de cr√©dito e outros m√©todos dispon√≠veis\n' +
                    '‚Ä¢ **Ativa√ß√£o:** Imediata ap√≥s confirma√ß√£o do pagamento',
                inline: false
            });

            // 8. Criar menu de sele√ß√£o de planos
            const selectMenu = new SelectMenuBuilder()
                .setCustomId('select_subscription_tier')
                .setPlaceholder('Escolha um plano de assinatura')
                .addOptions(
                    availableTiers.map(tier => {
                        const isCurrentPlan = currentTier === tier.tier_name;
                        const label = isCurrentPlan ? 
                            `${tier.display_name} (Renovar)` : 
                            `${tier.display_name} - R$ ${tier.price_brl.toFixed(2)}`;
                        
                        return {
                            label: label,
                            description: `${tier.max_slots} slots ‚Ä¢ ${tier.description}`,
                            value: tier.tier_name,
                            emoji: isCurrentPlan ? 'üëë' : 'üíé'
                        };
                    })
                );

            const selectRow = new ActionRowBuilder().addComponents(selectMenu);

            // 9. Criar bot√µes adicionais
            const buttons = new ActionRowBuilder();
            
            if (hasActiveSubscription) {
                buttons.addComponents(
                    new ButtonBuilder()
                        .setCustomId('view_clan_details')
                        .setLabel('üìä Detalhes do Cl√£')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('subscription_history')
                        .setLabel('üìú Hist√≥rico')
                        .setStyle(ButtonStyle.Secondary)
                );
            } else {
                buttons.addComponents(
                    new ButtonBuilder()
                        .setCustomId('subscription_help')
                        .setLabel('‚ùì Ajuda')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('contact_support')
                        .setLabel('üí¨ Suporte')
                        .setStyle(ButtonStyle.Secondary)
                );
            }

            // 10. Recomenda√ß√£o inteligente
            let recommendation = '';
            if (memberCount <= 1) {
                recommendation = 'üí° **Recomendado:** Plano Lutador para uso individual';
            } else if (memberCount <= 5) {
                recommendation = 'üí° **Recomendado:** Plano Esquadr√£o para seu grupo';
            } else if (memberCount <= 10) {
                recommendation = 'üí° **Recomendado:** Plano Guilda para cl√£s m√©dios';
            } else {
                recommendation = 'üí° **Recomendado:** Plano Imp√©rio para grandes organiza√ß√µes';
            }

            embed.setFooter({ text: recommendation });

            // 11. Enviar resposta
            await interaction.editReply({ 
                embeds: [embed], 
                components: [selectRow, buttons]
            });

        } catch (error) {
            console.error('Erro no comando /renovar:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setColor('#FF6B6B')
                .setTitle('‚ùå Erro Interno')
                .setDescription(
                    'Ocorreu um erro ao carregar os planos de assinatura.\n\n' +
                    'Tente novamente em instantes ou entre em contato com a administra√ß√£o.'
                )
                .setTimestamp();

            return interaction.editReply({ embeds: [errorEmbed] });
        }
    },
};