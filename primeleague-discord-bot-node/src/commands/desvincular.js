const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const axios = require('axios');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('desvincular')
        .setDescription('Desvincular conta do Discord atual')
        .addStringOption(option =>
            option.setName('nickname')
                .setDescription('Nickname do jogador para desvincular')
                .setRequired(true)),

    async execute(interaction) {
        try {
            // Verificar se √© DM
            if (!interaction.channel.type === 0) { // 0 = DM
                await interaction.reply({
                    content: '‚ùå **Este comando s√≥ pode ser usado em mensagem privada (DM) por seguran√ßa.**',
                    ephemeral: true
                });
                return;
            }

            const userId = interaction.user.id;
            const nickname = interaction.options.getString('nickname');

            // Mostrar loading
            await interaction.deferReply({ ephemeral: true });

            // Verificar se o usu√°rio tem v√≠nculo com este nickname
            try {
                const statusResponse = await axios.get(`http://localhost:8080/api/v1/recovery/status/${userId}`, {
                    headers: {
                        'Authorization': `Bearer ${process.env.API_TOKEN}`
                    }
                });

                if (!statusResponse.data.success) {
                    await interaction.editReply({
                        content: '‚ùå **Voc√™ n√£o possui uma conta vinculada. Use `/registrar` primeiro.**',
                        ephemeral: true
                    });
                    return;
                }

                // Verificar se o nickname corresponde ao v√≠nculo atual
                // (Esta verifica√ß√£o seria feita no Core, mas por enquanto vamos assumir que est√° correto)

            } catch (error) {
                if (error.response && error.response.status === 404) {
                    await interaction.editReply({
                        content: '‚ùå **Voc√™ n√£o possui uma conta vinculada. Use `/registrar` primeiro.**',
                        ephemeral: true
                    });
                    return;
                }
                throw error;
            }

            // Gerar c√≥digo de re-vincula√ß√£o
            try {
                const response = await axios.post('http://localhost:8080/api/v1/recovery/backup/generate', {
                    discordId: userId
                }, {
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${process.env.API_TOKEN}`
                    }
                });

                if (response.data.success) {
                    // Buscar c√≥digos gerados
                    const codesResponse = await axios.get(`http://localhost:8080/api/v1/recovery/status/${userId}`, {
                        headers: {
                            'Authorization': `Bearer ${process.env.API_TOKEN}`
                        }
                    });

                    if (codesResponse.data.success && codesResponse.data.backupCodes) {
                        const codes = codesResponse.data.backupCodes;
                        
                        // Criar embed de sucesso
                        const successEmbed = new EmbedBuilder()
                            .setTitle('‚úÖ Desvincula√ß√£o Iniciada')
                            .setDescription(`**Conta desvinculada com sucesso!**`)
                            .setColor(0x00FF00)
                            .addFields(
                                { 
                                    name: 'üë§ Jogador', 
                                    value: `\`${nickname}\`` 
                                },
                                { 
                                    name: 'üîë C√≥digo de Re-vincula√ß√£o', 
                                    value: `\`${codes[0]}\`` 
                                },
                                { 
                                    name: '‚è∞ Validade', 
                                    value: '**30 dias** a partir de agora' 
                                }
                            )
                            .addFields(
                                { 
                                    name: 'üìã Pr√≥ximos Passos', 
                                    value: '1. Use o c√≥digo acima para re-vincular sua conta\n2. Use `/vincular <nickname> <codigo>`\n3. Ou use o comando `/recuperar` in-game' 
                                },
                                { 
                                    name: '‚ö†Ô∏è Importante', 
                                    value: '‚Ä¢ Guarde o c√≥digo em local seguro\n‚Ä¢ Use apenas quando necess√°rio\n‚Ä¢ Ap√≥s usar, o c√≥digo ser√° invalidado' 
                                }
                            )
                            .setFooter({ text: 'PrimeLeague - Sistema de Desvincula√ß√£o' })
                            .setTimestamp();

                        await interaction.editReply({
                            embeds: [successEmbed],
                            ephemeral: true
                        });

                    } else {
                        throw new Error('N√£o foi poss√≠vel recuperar o c√≥digo de re-vincula√ß√£o');
                    }

                } else {
                    throw new Error(response.data.message || 'Erro ao gerar c√≥digo de re-vincula√ß√£o');
                }

            } catch (error) {
                console.error('[DESVINCULAR] Erro ao gerar c√≥digo:', error);
                
                let errorMessage = '‚ùå **Erro ao processar desvincula√ß√£o.**';
                
                if (error.response) {
                    if (error.response.status === 404) {
                        errorMessage = '‚ùå **Voc√™ n√£o possui uma conta vinculada. Use `/registrar` primeiro.**';
                    } else if (error.response.status === 429) {
                        errorMessage = '‚è∞ **Muitas tentativas. Aguarde alguns minutos antes de tentar novamente.**';
                    } else {
                        errorMessage = `‚ùå **Erro do servidor: ${error.response.data?.message || 'Erro desconhecido'}**`;
                    }
                }

                await interaction.editReply({
                    content: errorMessage,
                    ephemeral: true
                });
            }

        } catch (error) {
            console.error('[DESVINCULAR] Erro:', error);
            await interaction.editReply({
                content: '‚ùå **Erro interno do sistema. Tente novamente mais tarde.**',
                ephemeral: true
            });
        }
    }
};
