const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const axios = require('axios');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('recuperacao')
        .setDescription('Sistema de recupera√ß√£o de conta - Gera c√≥digos de backup seguros'),

    async execute(interaction) {
        try {
            // Verificar se √© DM
            if (!interaction.channel.type === 0) { // 0 = DM
                await interaction.reply({
                    content: '‚ùå **Este comando s√≥ pode ser usado em mensagem privada (DM) por seguran√ßa.**',
                    ephemeral: true
                });
                return;
            }

            const userId = interaction.user.id;

            // Criar embed inicial
            const embed = new EmbedBuilder()
                .setTitle('üõ°Ô∏è Sistema de Recupera√ß√£o de Conta')
                .setDescription('Este sistema permite gerar c√≥digos de backup para recuperar sua conta em caso de perda de acesso.')
                .setColor(0x0099FF)
                .addFields(
                    { 
                        name: '‚ö†Ô∏è Importante', 
                        value: '‚Ä¢ Os c√≥digos s√£o v√°lidos por **30 dias**\n‚Ä¢ Guarde-os em local seguro\n‚Ä¢ Nunca compartilhe com ningu√©m\n‚Ä¢ Use apenas em emerg√™ncias' 
                    },
                    { 
                        name: 'üîê Seguran√ßa', 
                        value: '‚Ä¢ C√≥digos criptografados com BCrypt\n‚Ä¢ Rate limiting para prevenir ataques\n‚Ä¢ Auditoria completa de tentativas' 
                    }
                )
                .setFooter({ text: 'PrimeLeague - Sistema de Seguran√ßa' })
                .setTimestamp();

            // Bot√£o para gerar c√≥digos
            const row = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('gerar_codigos_backup')
                        .setLabel('üîë Gerar C√≥digos de Backup')
                        .setStyle(ButtonStyle.Primary)
                        .setEmoji('üîë')
                );

            await interaction.reply({
                embeds: [embed],
                components: [row],
                ephemeral: true
            });

        } catch (error) {
            console.error('[RECUPERACAO] Erro:', error);
            await interaction.reply({
                content: '‚ùå **Erro interno do sistema. Tente novamente mais tarde.**',
                ephemeral: true
            });
        }
    },

    // Handler para o bot√£o de gerar c√≥digos
    async handleButton(interaction) {
        if (interaction.customId === 'gerar_codigos_backup') {
            await this.generateBackupCodes(interaction);
        }
    },

    async generateBackupCodes(interaction) {
        try {
            // Mostrar loading
            await interaction.deferUpdate();

            const userId = interaction.user.id;

            // Chamar API para gerar c√≥digos
            const response = await axios.post('http://localhost:8080/api/v1/recovery/backup/generate', {
                discordId: userId
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${process.env.API_TOKEN}`
                }
            });

            if (response.data.success) {
                // Buscar c√≥digos gerados (a API retorna apenas sucesso, precisamos buscar os c√≥digos)
                const statusResponse = await axios.get(`http://localhost:8080/api/v1/recovery/status/${userId}`, {
                    headers: {
                        'Authorization': `Bearer ${process.env.API_TOKEN}`
                    }
                });

                if (statusResponse.data.success && statusResponse.data.backupCodes) {
                    const codes = statusResponse.data.backupCodes;
                    
                    // Criar embed com os c√≥digos
                    const codesEmbed = new EmbedBuilder()
                        .setTitle('üîë C√≥digos de Backup Gerados')
                        .setDescription('**GUARDE ESTES C√ìDIGOS EM LOCAL SEGURO!**')
                        .setColor(0x00FF00)
                        .addFields(
                            { 
                                name: 'üìã Seus C√≥digos de Backup', 
                                value: codes.map((code, index) => `**${index + 1}.** \`${code}\``).join('\n') 
                            },
                            { 
                                name: '‚è∞ Validade', 
                                value: '**30 dias** a partir de agora' 
                            },
                            { 
                                name: 'üîí Seguran√ßa', 
                                value: '‚Ä¢ C√≥digos criptografados\n‚Ä¢ Rate limiting ativo\n‚Ä¢ Auditoria completa' 
                            }
                        )
                        .addFields(
                            { 
                                name: '‚ö†Ô∏è AVISO CR√çTICO', 
                                value: '‚Ä¢ **NUNCA** compartilhe estes c√≥digos\n‚Ä¢ Use apenas em emerg√™ncias\n‚Ä¢ Ap√≥s usar um c√≥digo, ele ser√° invalidado\n‚Ä¢ Guarde em local seguro offline' 
                            }
                        )
                        .setFooter({ text: 'PrimeLeague - C√≥digos de Backup' })
                        .setTimestamp();

                    await interaction.followUp({
                        embeds: [codesEmbed],
                        ephemeral: true
                    });

                } else {
                    throw new Error('N√£o foi poss√≠vel recuperar os c√≥digos gerados');
                }

            } else {
                throw new Error(response.data.message || 'Erro ao gerar c√≥digos');
            }

        } catch (error) {
            console.error('[RECUPERACAO] Erro ao gerar c√≥digos:', error);
            
            let errorMessage = '‚ùå **Erro ao gerar c√≥digos de backup.**';
            
            if (error.response) {
                if (error.response.status === 404) {
                    errorMessage = '‚ùå **Voc√™ n√£o possui uma conta vinculada. Use `/registrar` primeiro.**';
                } else if (error.response.status === 429) {
                    errorMessage = '‚è∞ **Muitas tentativas. Aguarde alguns minutos antes de tentar novamente.**';
                } else {
                    errorMessage = `‚ùå **Erro do servidor: ${error.response.data?.message || 'Erro desconhecido'}**`;
                }
            }

            await interaction.followUp({
                content: errorMessage,
                ephemeral: true
            });
        }
    }
};
