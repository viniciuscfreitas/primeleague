const mysql = require('mysql2/promise');

// Configura√ß√£o do banco de dados
const dbConfig = {
    host: 'localhost',
    user: 'root',
    password: '',
    database: 'primeleague',
    port: 3306
};

async function fixDuplicates() {
    let connection;
    
    try {
        console.log('üîß === INICIANDO CORRE√á√ÉO DE DADOS DUPLICADOS ===');
        
        // Conectar ao banco
        connection = await mysql.createConnection(dbConfig);
        console.log('‚úÖ Conex√£o com banco estabelecida');
        
        // 1. Verificar players duplicados
        console.log('\nüìã === VERIFICANDO PLAYERS DUPLICADOS ===');
        
        const [duplicates] = await connection.execute(`
            SELECT name, COUNT(*) as count, GROUP_CONCAT(player_id ORDER BY player_id) as player_ids
            FROM player_data 
            GROUP BY name 
            HAVING COUNT(*) > 1
        `);
        
        if (duplicates.length === 0) {
            console.log('‚úÖ Nenhum player duplicado encontrado');
            return;
        }
        
        console.log(`‚ùå Encontrados ${duplicates.length} players duplicados:`);
        duplicates.forEach(dup => {
            console.log(`   ${dup.name}: ${dup.count} registros (IDs: ${dup.player_ids})`);
        });
        
        // 2. Corrigir players duplicados
        console.log('\nüîß === CORRIGINDO PLAYERS DUPLICADOS ===');
        
        for (const dup of duplicates) {
            const playerIds = dup.player_ids.split(',').map(id => parseInt(id));
            const keepId = playerIds[0]; // Manter o primeiro ID
            const deleteIds = playerIds.slice(1); // Deletar os demais
            
            console.log(`\nüë§ Corrigindo ${dup.name}:`);
            console.log(`   Manter ID: ${keepId}`);
            console.log(`   Deletar IDs: ${deleteIds.join(', ')}`);
            
            // Verificar se h√° discord_links para os IDs que ser√£o deletados
            for (const deleteId of deleteIds) {
                const [links] = await connection.execute(`
                    SELECT * FROM discord_links WHERE player_id = ?
                `, [deleteId]);
                
                if (links.length > 0) {
                    console.log(`   ‚ö†Ô∏è  ID ${deleteId} tem ${links.length} discord_links - MIGRANDO...`);
                    
                    // Migrar discord_links para o ID que ser√° mantido
                    await connection.execute(`
                        UPDATE discord_links 
                        SET player_id = ?, player_uuid = (SELECT uuid FROM player_data WHERE player_id = ?)
                        WHERE player_id = ?
                    `, [keepId, keepId, deleteId]);
                    
                    console.log(`   ‚úÖ Discord links migrados do ID ${deleteId} para ${keepId}`);
                }
            }
            
            // Deletar players duplicados
            await connection.execute(`
                DELETE FROM player_data WHERE player_id IN (${deleteIds.join(',')})
            `);
            
            console.log(`   ‚úÖ Players duplicados deletados`);
        }
        
        // 3. Verificar discord_links √≥rf√£os
        console.log('\nüìã === VERIFICANDO LINKS √ìRF√ÉOS ===');
        
        const [orphanLinks] = await connection.execute(`
            SELECT dl.* 
            FROM discord_links dl 
            LEFT JOIN player_data pd ON dl.player_uuid = pd.uuid 
            WHERE pd.uuid IS NULL
        `);
        
        if (orphanLinks.length > 0) {
            console.log(`‚ùå Encontrados ${orphanLinks.length} links √≥rf√£os:`);
            orphanLinks.forEach(link => {
                console.log(`   Link ID: ${link.link_id} - Player UUID: ${link.player_uuid}`);
            });
            
            // Tentar corrigir links √≥rf√£os
            console.log('\nüîß === CORRIGINDO LINKS √ìRF√ÉOS ===');
            
            for (const link of orphanLinks) {
                // Tentar encontrar player por nome (se o link tiver player_name)
                if (link.player_name) {
                    const [players] = await connection.execute(`
                        SELECT * FROM player_data WHERE name = ?
                    `, [link.player_name]);
                    
                    if (players.length > 0) {
                        const player = players[0];
                        console.log(`   üîó Corrigindo link ${link.link_id} para player ${link.player_name}`);
                        
                        await connection.execute(`
                            UPDATE discord_links 
                            SET player_uuid = ? 
                            WHERE link_id = ?
                        `, [player.uuid, link.link_id]);
                        
                        console.log(`   ‚úÖ Link corrigido: ${link.player_uuid} -> ${player.uuid}`);
                    } else {
                        console.log(`   ‚ùå Player ${link.player_name} n√£o encontrado - DELETANDO LINK`);
                        await connection.execute(`
                            DELETE FROM discord_links WHERE link_id = ?
                        `, [link.link_id]);
                    }
                } else {
                    console.log(`   ‚ùå Link ${link.link_id} sem player_name - DELETANDO`);
                    await connection.execute(`
                        DELETE FROM discord_links WHERE link_id = ?
                    `, [link.link_id]);
                }
            }
        } else {
            console.log('‚úÖ Nenhum link √≥rf√£o encontrado');
        }
        
        // 4. Verificar players sem link
        console.log('\nüìã === VERIFICANDO PLAYERS SEM LINK ===');
        
        const [playersWithoutLink] = await connection.execute(`
            SELECT pd.* 
            FROM player_data pd 
            LEFT JOIN discord_links dl ON pd.uuid = dl.player_uuid 
            WHERE dl.player_uuid IS NULL
        `);
        
        if (playersWithoutLink.length > 0) {
            console.log(`‚ö†Ô∏è  Encontrados ${playersWithoutLink.length} players sem link Discord:`);
            playersWithoutLink.forEach(player => {
                console.log(`   ${player.name} (${player.uuid})`);
            });
        } else {
            console.log('‚úÖ Todos os players t√™m link Discord');
        }
        
        // 5. Verifica√ß√£o final
        console.log('\nüìã === VERIFICA√á√ÉO FINAL ===');
        
        const [finalDuplicates] = await connection.execute(`
            SELECT name, COUNT(*) as count
            FROM player_data 
            GROUP BY name 
            HAVING COUNT(*) > 1
        `);
        
        if (finalDuplicates.length === 0) {
            console.log('‚úÖ Nenhum player duplicado restante');
        } else {
            console.log('‚ùå Ainda h√° players duplicados:');
            finalDuplicates.forEach(dup => {
                console.log(`   ${dup.name}: ${dup.count} registros`);
            });
        }
        
        const [finalOrphans] = await connection.execute(`
            SELECT COUNT(*) as count
            FROM discord_links dl 
            LEFT JOIN player_data pd ON dl.player_uuid = pd.uuid 
            WHERE pd.uuid IS NULL
        `);
        
        if (finalOrphans[0].count === 0) {
            console.log('‚úÖ Nenhum link √≥rf√£o restante');
        } else {
            console.log(`‚ùå Ainda h√° ${finalOrphans[0].count} links √≥rf√£os`);
        }
        
        console.log('\n‚úÖ === CORRE√á√ÉO DE DADOS DUPLICADOS CONCLU√çDA ===');
        
    } catch (error) {
        console.error('‚ùå Erro durante corre√ß√£o:', error);
    } finally {
        if (connection) {
            await connection.end();
            console.log('üîå Conex√£o fechada');
        }
    }
}

// Executar a corre√ß√£o
fixDuplicates().catch(console.error);
