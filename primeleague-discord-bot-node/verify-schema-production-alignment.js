const mysql = require('mysql2/promise');

async function verifySchemaProductionAlignment() {
    const connection = await mysql.createConnection({
        host: 'localhost',
        port: 3306,
        user: 'root',
        password: 'root',
        database: 'primeleague',
        authPlugins: {
            mysql_native_password: () => () => Buffer.from('root', 'utf-8')
        }
    });

    try {
        console.log('üîç VERIFICA√á√ÉO COMPLETA: SCHEMA ‚Üî PRODU√á√ÉO');
        console.log('==========================================\n');

        // 1. VERIFICAR ESTRUTURA DA TABELA discord_links
        console.log('üìã 1. ESTRUTURA DA TABELA discord_links:');
        const [discordLinksStructure] = await connection.execute('DESCRIBE discord_links');
        console.table(discordLinksStructure);

        // 2. VERIFICAR SE player_id EXISTE E player_uuid N√ÉO EXISTE
        const hasPlayerId = discordLinksStructure.some(col => col.Field === 'player_id');
        const hasPlayerUuid = discordLinksStructure.some(col => col.Field === 'player_uuid');
        
        console.log(`\nüîç VERIFICA√á√ÉO DE COLUNAS:`);
        console.log(`- player_id existe: ${hasPlayerId ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
        console.log(`- player_uuid existe: ${hasPlayerUuid ? '‚ùå SIM (ERRO)' : '‚úÖ N√ÉO (CORRETO)'}`);

        // 3. VERIFICAR FOREIGN KEYS
        console.log('\nüîó 2. FOREIGN KEYS DA TABELA discord_links:');
        const [foreignKeys] = await connection.execute(`
            SELECT 
                COLUMN_NAME,
                REFERENCED_TABLE_NAME,
                REFERENCED_COLUMN_NAME
            FROM information_schema.KEY_COLUMN_USAGE 
            WHERE TABLE_SCHEMA = 'primeleague' 
            AND TABLE_NAME = 'discord_links' 
            AND REFERENCED_TABLE_NAME IS NOT NULL
        `);
        console.table(foreignKeys);

        // 4. VERIFICAR SE AS FOREIGN KEYS EST√ÉO CORRETAS
        const playerIdFk = foreignKeys.find(fk => fk.COLUMN_NAME === 'player_id');
        const discordIdFk = foreignKeys.find(fk => fk.COLUMN_NAME === 'discord_id');
        
        console.log(`\n‚úÖ VERIFICA√á√ÉO DE FOREIGN KEYS:`);
        console.log(`- player_id FK para player_data.player_id: ${playerIdFk ? '‚úÖ CORRETO' : '‚ùå ERRADO'}`);
        console.log(`- discord_id FK para discord_users.discord_id: ${discordIdFk ? '‚úÖ CORRETO' : '‚ùå ERRADO'}`);

        // 5. VERIFICAR √çNDICES
        console.log('\nüìà 3. √çNDICES DA TABELA discord_links:');
        const [indexes] = await connection.execute(`
            SELECT INDEX_NAME, COLUMN_NAME, NON_UNIQUE
            FROM information_schema.STATISTICS 
            WHERE TABLE_SCHEMA = 'primeleague' 
            AND TABLE_NAME = 'discord_links'
            ORDER BY INDEX_NAME, SEQ_IN_INDEX
        `);
        console.table(indexes);

        // 6. VERIFICAR SE H√Å √çNDICE √öNICO EM player_id
        const hasUniquePlayerId = indexes.some(idx => idx.INDEX_NAME === 'uk_player_id');
        console.log(`\nüîí VERIFICA√á√ÉO DE √çNDICES √öNICOS:`);
        console.log(`- √çndice √∫nico em player_id: ${hasUniquePlayerId ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);

        // 7. VERIFICAR ESTRUTURA DA TABELA player_data
        console.log('\nüìã 4. ESTRUTURA DA TABELA player_data:');
        const [playerDataStructure] = await connection.execute('DESCRIBE player_data');
        console.table(playerDataStructure);

        // 8. VERIFICAR SE player_data TEM player_id COMO PRIMARY KEY
        const playerIdPrimaryKey = playerDataStructure.find(col => col.Field === 'player_id' && col.Key === 'PRI');
        console.log(`\nüîë VERIFICA√á√ÉO DE PRIMARY KEY:`);
        console.log(`- player_id √© PRIMARY KEY em player_data: ${playerIdPrimaryKey ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);

        // 9. VERIFICAR ESTRUTURA DA TABELA discord_users
        console.log('\nüìã 5. ESTRUTURA DA TABELA discord_users:');
        const [discordUsersStructure] = await connection.execute('DESCRIBE discord_users');
        console.table(discordUsersStructure);

        // 10. VERIFICAR DADOS EXISTENTES
        console.log('\nüìä 6. DADOS EXISTENTES:');
        const [playerDataCount] = await connection.execute('SELECT COUNT(*) as total FROM player_data');
        const [discordLinksCount] = await connection.execute('SELECT COUNT(*) as total FROM discord_links');
        const [discordUsersCount] = await connection.execute('SELECT COUNT(*) as total FROM discord_users');
        
        console.log(`- player_data: ${playerDataCount[0].total} registros`);
        console.log(`- discord_links: ${discordLinksCount[0].total} registros`);
        console.log(`- discord_users: ${discordUsersCount[0].total} registros`);

        // 11. VERIFICAR SE EXISTE O CONSOLE (ESSENCIAL)
        const [consoleExists] = await connection.execute('SELECT COUNT(*) as total FROM player_data WHERE player_id = 0');
        console.log(`\nüéÆ VERIFICA√á√ÉO DO CONSOLE:`);
        console.log(`- CONSOLE (player_id = 0) existe: ${consoleExists[0].total > 0 ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);

        // 12. TESTAR UMA QUERY DE JOIN PARA VERIFICAR FUNCIONAMENTO
        console.log('\nüîç 7. TESTE DE QUERY DE JOIN:');
        try {
            const [joinTest] = await connection.execute(`
                SELECT 
                    pd.player_id,
                    pd.name,
                    dl.discord_id,
                    dl.verified
                FROM player_data pd
                LEFT JOIN discord_links dl ON pd.player_id = dl.player_id
                LIMIT 5
            `);
            console.log('‚úÖ Query de JOIN funcionando corretamente:');
            console.table(joinTest);
        } catch (error) {
            console.log('‚ùå Erro na query de JOIN:', error.message);
        }

        // 13. VERIFICAR SE N√ÉO EXISTE TABELA donors (LIMPEZA)
        const [donorsTable] = await connection.execute(`
            SELECT COUNT(*) as exists_count FROM information_schema.tables 
            WHERE table_schema = 'primeleague' AND table_name = 'donors'
        `);
        
        console.log(`\nüßπ 8. VERIFICA√á√ÉO DE LIMPEZA:`);
        console.log(`- Tabela donors existe: ${donorsTable[0].exists_count > 0 ? '‚ùå SIM (ERRO)' : '‚úÖ N√ÉO (CORRETO)'}`);

        // 14. VERIFICAR TODAS AS TABELAS DO SISTEMA
        console.log('\nüìã 9. TODAS AS TABELAS DO SISTEMA:');
        const [allTables] = await connection.execute(`
            SELECT table_name, table_rows
            FROM information_schema.tables 
            WHERE table_schema = 'primeleague'
            ORDER BY table_name
        `);
        console.table(allTables);

        // 15. VERIFICAR FOREIGN KEYS DE TODAS AS TABELAS
        console.log('\nüîó 10. TODAS AS FOREIGN KEYS DO SISTEMA:');
        const [allForeignKeys] = await connection.execute(`
            SELECT 
                TABLE_NAME,
                COLUMN_NAME,
                REFERENCED_TABLE_NAME,
                REFERENCED_COLUMN_NAME
            FROM information_schema.KEY_COLUMN_USAGE 
            WHERE TABLE_SCHEMA = 'primeleague' 
            AND REFERENCED_TABLE_NAME IS NOT NULL
            ORDER BY TABLE_NAME, COLUMN_NAME
        `);
        console.table(allForeignKeys);

        // 16. RESUMO FINAL
        console.log('\nüéØ RESUMO FINAL DA VERIFICA√á√ÉO:');
        
        const allChecks = [
            hasPlayerId,
            !hasPlayerUuid,
            playerIdFk,
            discordIdFk,
            hasUniquePlayerId,
            playerIdPrimaryKey,
            consoleExists[0].total > 0,
            donorsTable[0].exists_count === 0
        ];
        
        const passedChecks = allChecks.filter(check => check).length;
        const totalChecks = allChecks.length;
        
        console.log(`‚úÖ ${passedChecks}/${totalChecks} verifica√ß√µes passaram`);
        
        if (passedChecks === totalChecks) {
            console.log('\nüéâ SCHEMA PERFEITAMENTE ALINHADO COM PRODU√á√ÉO!');
            console.log('‚úÖ player_id √© a foreign key correta');
            console.log('‚úÖ Performance otimizada com √≠ndices num√©ricos');
            console.log('‚úÖ Compatibilidade com offline-mode garantida');
            console.log('‚úÖ Banco de dados limpo e consistente');
            console.log('‚úÖ Todas as foreign keys corretas');
            console.log('‚úÖ Estrutura completa do sistema validada');
        } else {
            console.log('\n‚ö†Ô∏è  ALGUMAS VERIFICA√á√ïES FALHARAM');
            console.log('‚ùå O schema ainda precisa de corre√ß√µes');
        }

        // 17. VERIFICA√á√ÉO EXTRA: COMPARAR COM SCHEMA OFICIAL
        console.log('\nüìÑ 11. VERIFICA√á√ÉO CONTRA SCHEMA OFICIAL:');
        
        // Verificar se a estrutura atual corresponde ao que deveria estar no schema oficial
        const expectedStructure = {
            'link_id': { type: 'int(11)', null: 'NO', key: 'PRI', extra: 'auto_increment' },
            'discord_id': { type: 'varchar(20)', null: 'NO', key: 'MUL' },
            'player_id': { type: 'int(11)', null: 'NO', key: 'UNI' },
            'is_primary': { type: 'tinyint(1)', null: 'NO', default: '0' },
            'verified': { type: 'tinyint(1)', null: 'NO', default: '0' },
            'verification_code': { type: 'varchar(8)', null: 'YES' },
            'code_expires_at': { type: 'timestamp', null: 'YES' },
            'verified_at': { type: 'timestamp', null: 'YES' },
            'created_at': { type: 'timestamp', null: 'NO', default: 'current_timestamp()' }
        };

        let structureMatches = true;
        for (const [fieldName, expectedField] of Object.entries(expectedStructure)) {
            const actualField = discordLinksStructure.find(f => f.Field === fieldName);
            if (!actualField) {
                console.log(`‚ùå Campo ${fieldName} n√£o encontrado na produ√ß√£o`);
                structureMatches = false;
            } else {
                // Verificar se o tipo e outras propriedades correspondem
                if (actualField.Type !== expectedField.type || 
                    actualField.Null !== expectedField.null ||
                    actualField.Key !== expectedField.key) {
                    console.log(`‚ö†Ô∏è  Campo ${fieldName} tem diferen√ßas: esperado ${expectedField.type}/${expectedField.null}/${expectedField.key}, encontrado ${actualField.Type}/${actualField.Null}/${actualField.Key}`);
                    structureMatches = false;
                }
            }
        }

        console.log(`\nüìã ESTRUTURA CORRESPONDE AO SCHEMA OFICIAL: ${structureMatches ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);

        // 18. VERIFICA√á√ÉO FINAL ABSOLUTA
        console.log('\nüéØ VERIFICA√á√ÉO ABSOLUTA FINAL:');
        
        const absoluteChecks = [
            hasPlayerId && !hasPlayerUuid, // player_id existe, player_uuid n√£o
            playerIdFk && playerIdFk.REFERENCED_TABLE_NAME === 'player_data' && playerIdFk.REFERENCED_COLUMN_NAME === 'player_id',
            discordIdFk && discordIdFk.REFERENCED_TABLE_NAME === 'discord_users' && discordIdFk.REFERENCED_COLUMN_NAME === 'discord_id',
            hasUniquePlayerId,
            playerIdPrimaryKey,
            structureMatches
        ];

        const absolutePassed = absoluteChecks.filter(check => check).length;
        const absoluteTotal = absoluteChecks.length;

        console.log(`üéØ ${absolutePassed}/${absoluteTotal} verifica√ß√µes absolutas passaram`);

        if (absolutePassed === absoluteTotal) {
            console.log('\nüèÜ CERTEZA ABSOLUTA: SCHEMA PERFEITAMENTE ALINHADO!');
            console.log('üéâ O sistema est√° 100% consistente e pronto para produ√ß√£o');
        } else {
            console.log('\nüö® ATEN√á√ÉO: Inconsist√™ncias detectadas que precisam ser corrigidas');
        }

    } catch (error) {
        console.error('‚ùå Erro ao verificar alinhamento:', error.message);
    } finally {
        await connection.end();
    }
}

verifySchemaProductionAlignment();
