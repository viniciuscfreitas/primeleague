const mysql = require('mysql2/promise');

async function verifyFinalArchitecture() {
    const connection = await mysql.createConnection({
        host: 'localhost',
        port: 3306,
        user: 'root',
        password: 'root',
        database: 'primeleague',
        authPlugins: {
            mysql_native_password: () => () => Buffer.from('root', 'utf-8')
        }
    });

    try {
        console.log('üéØ VERIFICA√á√ÉO FINAL DA ARQUITETURA RESTAURADA');
        console.log('==============================================\n');

        // 1. Verificar estrutura da tabela discord_links
        console.log('üìã ESTRUTURA DA TABELA discord_links:');
        const [discordLinksStructure] = await connection.execute('DESCRIBE discord_links');
        console.table(discordLinksStructure);

        // 2. Verificar se player_id existe e player_uuid n√£o existe
        const hasPlayerId = discordLinksStructure.some(col => col.Field === 'player_id');
        const hasPlayerUuid = discordLinksStructure.some(col => col.Field === 'player_uuid');
        
        console.log(`\nüîç VERIFICA√á√ÉO DE COLUNAS:`);
        console.log(`- player_id existe: ${hasPlayerId ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
        console.log(`- player_uuid existe: ${hasPlayerUuid ? '‚ùå SIM (ERRO)' : '‚úÖ N√ÉO (CORRETO)'}`);

        // 3. Verificar foreign keys
        console.log('\nüîó FOREIGN KEYS DA TABELA discord_links:');
        const [foreignKeys] = await connection.execute(`
            SELECT 
                COLUMN_NAME,
                REFERENCED_TABLE_NAME,
                REFERENCED_COLUMN_NAME
            FROM information_schema.KEY_COLUMN_USAGE 
            WHERE TABLE_SCHEMA = 'primeleague' 
            AND TABLE_NAME = 'discord_links' 
            AND REFERENCED_TABLE_NAME IS NOT NULL
        `);
        console.table(foreignKeys);

        // 4. Verificar se as foreign keys est√£o corretas
        const playerIdFk = foreignKeys.find(fk => fk.COLUMN_NAME === 'player_id');
        const discordIdFk = foreignKeys.find(fk => fk.COLUMN_NAME === 'discord_id');
        
        console.log(`\n‚úÖ VERIFICA√á√ÉO DE FOREIGN KEYS:`);
        console.log(`- player_id FK para player_data.player_id: ${playerIdFk ? '‚úÖ CORRETO' : '‚ùå ERRADO'}`);
        console.log(`- discord_id FK para discord_users.discord_id: ${discordIdFk ? '‚úÖ CORRETO' : '‚ùå ERRADO'}`);

        // 5. Verificar dados existentes
        console.log('\nüìä DADOS EXISTENTES:');
        const [playerDataCount] = await connection.execute('SELECT COUNT(*) as total FROM player_data');
        const [discordLinksCount] = await connection.execute('SELECT COUNT(*) as total FROM discord_links');
        const [discordUsersCount] = await connection.execute('SELECT COUNT(*) as total FROM discord_users');
        
        console.log(`- player_data: ${playerDataCount[0].total} registros`);
        console.log(`- discord_links: ${discordLinksCount[0].total} registros`);
        console.log(`- discord_users: ${discordUsersCount[0].total} registros`);

        // 6. Verificar se n√£o existe tabela donors
        const [donorsTable] = await connection.execute(`
            SELECT COUNT(*) as exists FROM information_schema.tables 
            WHERE table_schema = 'primeleague' AND table_name = 'donors'
        `);
        
        console.log(`\nüßπ VERIFICA√á√ÉO DE LIMPEZA:`);
        console.log(`- Tabela donors existe: ${donorsTable[0].exists > 0 ? '‚ùå SIM (ERRO)' : '‚úÖ N√ÉO (CORRETO)'}`);

        // 7. Verificar √≠ndices de performance
        console.log('\nüìà √çNDICES DE PERFORMANCE:');
        const [indexes] = await connection.execute(`
            SELECT INDEX_NAME, COLUMN_NAME 
            FROM information_schema.STATISTICS 
            WHERE TABLE_SCHEMA = 'primeleague' 
            AND TABLE_NAME = 'discord_links'
            ORDER BY INDEX_NAME
        `);
        console.table(indexes);

        // 8. Verificar se h√° √≠ndices √∫nicos corretos
        const hasUniquePlayerId = indexes.some(idx => idx.INDEX_NAME === 'uk_player_id');
        console.log(`\nüîí VERIFICA√á√ÉO DE √çNDICES √öNICOS:`);
        console.log(`- √çndice √∫nico em player_id: ${hasUniquePlayerId ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);

        // 9. Resumo final
        console.log('\nüéØ RESUMO FINAL DA ARQUITETURA:');
        
        const allChecks = [
            hasPlayerId,
            !hasPlayerUuid,
            playerIdFk,
            discordIdFk,
            donorsTable[0].exists === 0,
            hasUniquePlayerId
        ];
        
        const passedChecks = allChecks.filter(check => check).length;
        const totalChecks = allChecks.length;
        
        console.log(`‚úÖ ${passedChecks}/${totalChecks} verifica√ß√µes passaram`);
        
        if (passedChecks === totalChecks) {
            console.log('\nüéâ ARQUITETURA RESTAURADA COM SUCESSO!');
            console.log('‚úÖ player_id √© a foreign key correta');
            console.log('‚úÖ Performance otimizada com √≠ndices num√©ricos');
            console.log('‚úÖ Compatibilidade com offline-mode garantida');
            console.log('‚úÖ Banco de dados limpo e consistente');
        } else {
            console.log('\n‚ö†Ô∏è  ALGUMAS VERIFICA√á√ïES FALHARAM');
            console.log('‚ùå A arquitetura ainda precisa de corre√ß√µes');
        }

    } catch (error) {
        console.error('‚ùå Erro ao verificar arquitetura:', error.message);
    } finally {
        await connection.end();
    }
}

verifyFinalArchitecture();
