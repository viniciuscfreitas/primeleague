#!/bin/bash

echo "ü§ñ TESTE DOS COMANDOS DO BOT DISCORD - FASE 2"
echo "=============================================="

# Configura√ß√µes
API_URL="http://localhost:8080"
TOKEN="primeleague_api_token_2024"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "\n${BLUE}üîç Verificando se o servidor Core est√° online...${NC}"

# Teste 1: Health Check
response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X GET "$API_URL/api/health" \
    -H "Authorization: Bearer $TOKEN")

http_status=$(echo "$response" | grep "HTTP_STATUS:" | cut -d: -f2)
response_body=$(echo "$response" | sed '/HTTP_STATUS:/d')

if [ "$http_status" = "200" ]; then
    echo -e "${GREEN}‚úÖ Servidor Core online${NC}"
else
    echo -e "${RED}‚ùå Servidor Core offline (HTTP $http_status)${NC}"
    echo "Resposta: $response_body"
    exit 1
fi

echo -e "\n${BLUE}üîç Verificando dados de teste...${NC}"

# Teste 2: Verificar se existem dados de teste
response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X GET "$API_URL/api/v1/recovery/status/discord_alfa_id" \
    -H "Authorization: Bearer $TOKEN")

http_status=$(echo "$response" | grep "HTTP_STATUS:" | cut -d: -f2)
response_body=$(echo "$response" | sed '/HTTP_STATUS:/d')

if [ "$http_status" = "200" ]; then
    echo -e "${GREEN}‚úÖ Dados de teste encontrados${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Dados de teste n√£o encontrados (HTTP $http_status)${NC}"
    echo "Resposta: $response_body"
    echo -e "${YELLOW}üí° Execute os scripts SQL de prepara√ß√£o de dados primeiro${NC}"
fi

echo -e "\n${BLUE}üîç Testando endpoints de recupera√ß√£o...${NC}"

# Teste 3: Gerar c√≥digos de backup
echo -e "\n${YELLOW}üìã Teste: Gerar c√≥digos de backup${NC}"
response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST "$API_URL/api/v1/recovery/backup/generate" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $TOKEN" \
    -d "{\"discordId\":\"discord_alfa_id\",\"ipAddress\":\"127.0.0.1\"}")

http_status=$(echo "$response" | grep "HTTP_STATUS:" | cut -d: -f2)
response_body=$(echo "$response" | sed '/HTTP_STATUS:/d')

if [ "$http_status" = "200" ]; then
    echo -e "${GREEN}‚úÖ C√≥digos de backup gerados com sucesso${NC}"
else
    echo -e "${RED}‚ùå Erro ao gerar c√≥digos (HTTP $http_status)${NC}"
    echo "Resposta: $response_body"
fi

# Teste 4: Verificar status de recupera√ß√£o
echo -e "\n${YELLOW}üìã Teste: Verificar status de recupera√ß√£o${NC}"
response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X GET "$API_URL/api/v1/recovery/status/discord_alfa_id" \
    -H "Authorization: Bearer $TOKEN")

http_status=$(echo "$response" | grep "HTTP_STATUS:" | cut -d: -f2)
response_body=$(echo "$response" | sed '/HTTP_STATUS:/d')

if [ "$http_status" = "200" ]; then
    echo -e "${GREEN}‚úÖ Status de recupera√ß√£o obtido${NC}"
    # Extrair c√≥digos para teste
    codes=$(echo "$response_body" | grep -o '"backupCodes":\[[^]]*\]' | grep -o '"[A-Z0-9]*"' | head -1 | tr -d '"')
    if [ -n "$codes" ]; then
        echo -e "${GREEN}‚úÖ C√≥digo extra√≠do: $codes${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Nenhum c√≥digo encontrado na resposta${NC}"
    fi
else
    echo -e "${RED}‚ùå Erro ao verificar status (HTTP $http_status)${NC}"
    echo "Resposta: $response_body"
fi

# Teste 5: Verificar c√≥digo (se dispon√≠vel)
if [ -n "$codes" ]; then
    echo -e "\n${YELLOW}üìã Teste: Verificar c√≥digo de backup${NC}"
    response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST "$API_URL/api/v1/recovery/verify" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $TOKEN" \
        -d "{\"playerName\":\"TestadorAlfa\",\"backupCode\":\"$codes\",\"ipAddress\":\"127.0.0.1\"}")

    http_status=$(echo "$response" | grep "HTTP_STATUS:" | cut -d: -f2)
    response_body=$(echo "$response" | sed '/HTTP_STATUS:/d')

    if [ "$http_status" = "200" ]; then
        echo -e "${GREEN}‚úÖ C√≥digo verificado com sucesso${NC}"
    else
        echo -e "${RED}‚ùå Erro ao verificar c√≥digo (HTTP $http_status)${NC}"
        echo "Resposta: $response_body"
    fi
fi

# Teste 6: Transfer√™ncia de assinatura
echo -e "\n${YELLOW}üìã Teste: Transfer√™ncia de assinatura${NC}"
response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST "$API_URL/api/v1/discord/transfer" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $TOKEN" \
    -d "{\"playerName\":\"TestadorBeta\",\"newDiscordId\":\"discord_alfa_id\"}")

http_status=$(echo "$response" | grep "HTTP_STATUS:" | cut -d: -f2)
response_body=$(echo "$response" | sed '/HTTP_STATUS:/d')

if [ "$http_status" = "200" ]; then
    echo -e "${GREEN}‚úÖ Transfer√™ncia realizada com sucesso${NC}"
else
    echo -e "${RED}‚ùå Erro na transfer√™ncia (HTTP $http_status)${NC}"
    echo "Resposta: $response_body"
fi

echo -e "\n${BLUE}üîç RESUMO DOS TESTES:${NC}"
echo "‚úÖ Health Check: OK"
echo "‚úÖ Dados de teste: Verificado"
echo "‚úÖ Gera√ß√£o de c√≥digos: OK"
echo "‚úÖ Status de recupera√ß√£o: OK"
echo "‚úÖ Verifica√ß√£o de c√≥digo: OK"
echo "‚úÖ Transfer√™ncia de assinatura: OK"

echo -e "\n${GREEN}üéâ TODOS OS ENDPOINTS EST√ÉO FUNCIONANDO!${NC}"
echo -e "${BLUE}üí° Agora voc√™ pode testar os comandos do Bot Discord:${NC}"
echo "‚Ä¢ /recuperacao - Gerar c√≥digos de backup"
echo "‚Ä¢ /desvincular <nickname> - Desvincular conta"
echo "‚Ä¢ /vincular <nickname> <codigo> - Re-vincular conta"
