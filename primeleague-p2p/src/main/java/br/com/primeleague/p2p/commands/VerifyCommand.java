package br.com.primeleague.p2p.commands;

import br.com.primeleague.core.api.PrimeLeagueAPI;
import br.com.primeleague.p2p.PrimeLeagueP2P;
import br.com.primeleague.p2p.managers.LimboManager;
import org.bukkit.Bukkit;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

/**
 * Comando para verifica√ß√£o de c√≥digos do Discord.
 * 
 * Permite que jogadores confirmem seu registro no Discord
 * digitando o c√≥digo recebido no servidor. Integrado com
 * o sistema de limbo para jogadores pendentes.
 * 
 * @author PrimeLeague Team
 * @version 2.0.0
 */
public class VerifyCommand implements CommandExecutor {
    
    private final LimboManager limboManager;
    
    public VerifyCommand(LimboManager limboManager) {
        this.limboManager = limboManager;
    }

    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        // Verificar se √© um jogador
        if (!(sender instanceof Player)) {
            sender.sendMessage("¬ßc‚ùå Este comando s√≥ pode ser usado por jogadores!");
            return true;
        }

        final Player player = (Player) sender;
        
        // BARRERA DE SEGURAN√áA: Verificar se o perfil do jogador est√° carregado
        if (PrimeLeagueAPI.getDataManager().isLoading(player.getUniqueId())) {
            player.sendMessage("¬ßcSeu perfil ainda est√° carregando. Tente novamente em um instante.");
            return true;
        }

        // üéØ VERIFICA√á√ÉO: Impedir que jogadores j√° verificados usem o comando (ANTES de verificar argumentos)
        // Usar UUID can√¥nico para verifica√ß√£o correta
        UUID canonicalUuid = PrimeLeagueAPI.getDataManager().getCanonicalUuid(player.getUniqueId());
        boolean isVerified = PrimeLeagueAPI.getDataManager().isPlayerVerified(canonicalUuid);
        PrimeLeagueP2P.getInstance().getLogger().info("[VERIFY-COMMAND] Jogador " + player.getName() + " - Bukkit UUID: " + player.getUniqueId() + " - Canonical UUID: " + canonicalUuid + " - Verificado: " + isVerified);
        
        if (isVerified) {
            player.sendMessage("¬ßc‚ùå Voc√™ j√° est√° verificado no Discord!");
            player.sendMessage("¬ß7üí° Este comando √© apenas para jogadores que ainda n√£o verificaram sua conta.");
            PrimeLeagueP2P.getInstance().getLogger().info("[VERIFY-COMMAND] Jogador " + player.getName() + " BLOQUEADO - j√° verificado");
            return true;
        }

        // Verificar argumentos (apenas para jogadores n√£o verificados)
        if (args.length != 1) {
            player.sendMessage("¬ßc‚ùå Uso correto: /verify <c√≥digo>");
            player.sendMessage("¬ß7üí° Digite o c√≥digo de 6 d√≠gitos recebido no Discord.");
            return true;
        }

        final String verifyCode = args[0];

        // Validar formato do c√≥digo
        if (!verifyCode.matches("\\d{6}")) {
            player.sendMessage("¬ßc‚ùå C√≥digo inv√°lido! Use apenas 6 d√≠gitos num√©ricos.");
            return true;
        }

        // Executar verifica√ß√£o de forma ass√≠ncrona
        Bukkit.getScheduler().runTaskAsynchronously(PrimeLeagueP2P.getInstance(), new Runnable() {
            @Override
            public void run() {
                try {
                    final boolean success = verifyDiscordLink(player.getName(), verifyCode);
                    
                    // Retornar resultado para a thread principal
                    Bukkit.getScheduler().runTask(PrimeLeagueP2P.getInstance(), new Runnable() {
                        @Override
                        public void run() {
                            if (success) {
                                // Remover jogador do limbo
                                limboManager.removePlayerFromLimbo(player.getUniqueId());
                                
                                // VERIFICAR ASSINATURA IMEDIATAMENTE AP√ìS VERIFICA√á√ÉO
                                checkSubscriptionAndKickIfNeeded(player);
                                
                                // Notificar Discord sobre sucesso e autorizar IP
                                String playerIp = player.getAddress().getAddress().getHostAddress();
                                notifyDiscordSuccess(player.getName(), playerIp);
                                
                                // üéØ UX PERFEITA: Informar sobre autoriza√ß√£o de IP
                                player.sendMessage("");
                                player.sendMessage("¬ßa¬ßlüéâ VERIFICA√á√ÉO CONCLU√çDA COM SUCESSO!");
                                player.sendMessage("");
                                player.sendMessage("¬ßf‚úÖ Sua conta Discord foi vinculada!");
                                player.sendMessage("¬ßf‚úÖ Sua assinatura est√° ativa!");
                                player.sendMessage("");
                                player.sendMessage("¬ßeüîê SEGURAN√áA DE IP:");
                                player.sendMessage("¬ßf‚úÖ Seu IP atual (¬ße" + playerIp + "¬ßf) foi autorizado automaticamente");
                                player.sendMessage("¬ßfüí° Se conectar de outro local, voc√™ precisar√° autorizar via Discord");
                                player.sendMessage("");
                                player.sendMessage("¬ßaüîÑ Voc√™ pode jogar normalmente!");
                                player.sendMessage("");
                            } else {
                                player.sendMessage("¬ßc‚ùå C√≥digo inv√°lido ou expirado!");
                                player.sendMessage("¬ß7üí° Verifique se digitou corretamente e se n√£o expirou (5 minutos).");
                            }
                        }
                    });
                    
                } catch (Exception e) {
                    // Log do erro
                    PrimeLeagueP2P.getInstance().getLogger().severe("Erro ao verificar c√≥digo: " + e.getMessage());
                    e.printStackTrace();
                    
                    // Retornar erro para o jogador
                    Bukkit.getScheduler().runTask(PrimeLeagueP2P.getInstance(), new Runnable() {
                        @Override
                        public void run() {
                            player.sendMessage("¬ßc‚ùå Erro interno ao verificar c√≥digo. Tente novamente.");
                        }
                    });
                }
            }
        });

        return true;
    }

    /**
     * Verifica o c√≥digo de verifica√ß√£o no banco de dados.
     * 
     * @param playerName Nome do jogador
     * @param verifyCode C√≥digo de verifica√ß√£o
     * @return true se a verifica√ß√£o foi bem-sucedida, false caso contr√°rio
     */
    private boolean verifyDiscordLink(String playerName, String verifyCode) {
        Connection connection = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            connection = PrimeLeagueAPI.getDataManager().getConnection();
            
            // PRIMEIRO: Verificar se o jogador j√° est√° verificado
            String checkVerifiedSql = "SELECT dl.verified FROM discord_links dl JOIN player_data pd ON dl.player_id = pd.player_id WHERE pd.name = ? LIMIT 1";
            stmt = connection.prepareStatement(checkVerifiedSql);
            stmt.setString(1, playerName);
            rs = stmt.executeQuery();
            
            if (rs.next()) {
                boolean isVerified = rs.getBoolean("verified");
                if (isVerified) {
                    PrimeLeagueP2P.getInstance().getLogger().info("Jogador " + playerName + " j√° est√° verificado - n√£o precisa de c√≥digo");
                    return false; // J√° verificado, n√£o precisa de c√≥digo
                }
            }
            
            rs.close();
            stmt.close();
            
            // ‚úÖ CORRE√á√ÉO ARQUITETURAL: Implementar l√≥gica em Java em vez de stored procedure
            // 1. Verificar se o c√≥digo de verifica√ß√£o √© v√°lido e n√£o expirou
            String verifyCodeSql = "SELECT dl.discord_id, dl.player_id, dl.verification_code, dl.code_expires_at " +
                                 "FROM discord_links dl " +
                                 "JOIN player_data pd ON dl.player_id = pd.player_id " +
                                 "WHERE pd.name = ? AND dl.verification_code = ? AND dl.verified = 0";
            
            stmt = connection.prepareStatement(verifyCodeSql);
            stmt.setString(1, playerName);
            stmt.setString(2, verifyCode);
            
            rs = stmt.executeQuery();
            
            if (rs.next()) {
                String discordId = rs.getString("discord_id");
                int playerId = rs.getInt("player_id");
                String storedCode = rs.getString("verification_code");
                java.sql.Timestamp expiresAt = rs.getTimestamp("code_expires_at");
                
                // Verificar se o c√≥digo n√£o expirou
                if (expiresAt != null && expiresAt.after(new java.sql.Timestamp(System.currentTimeMillis()))) {
                    // C√≥digo v√°lido - marcar como verificado
                    rs.close();
                    stmt.close();
                    
                    String updateSql = "UPDATE discord_links SET verified = 1, verified_at = NOW(), " +
                                     "verification_code = NULL, code_expires_at = NULL " +
                                     "WHERE discord_id = ? AND player_id = ?";
                    
                    stmt = connection.prepareStatement(updateSql);
                    stmt.setString(1, discordId);
                    stmt.setInt(2, playerId);
                    
                    int affectedRows = stmt.executeUpdate();
                    
                    if (affectedRows > 0) {
                        // Log da verifica√ß√£o bem-sucedida
                        PrimeLeagueP2P.getInstance().getLogger().info(
                            "‚úÖ Verifica√ß√£o bem-sucedida: " + playerName + " -> Discord ID: " + discordId + " (player_id: " + playerId + ")"
                        );
                        return true;
                    } else {
                        PrimeLeagueP2P.getInstance().getLogger().warning(
                            "‚ö†Ô∏è Falha ao atualizar status de verifica√ß√£o para " + playerName
                        );
                        return false;
                    }
                } else {
                    // C√≥digo expirado
                    PrimeLeagueP2P.getInstance().getLogger().info(
                        "‚ùå C√≥digo de verifica√ß√£o expirado para " + playerName + " (expirava em: " + expiresAt + ")"
                    );
                    return false;
                }
            } else {
                // C√≥digo inv√°lido ou jogador n√£o encontrado
                PrimeLeagueP2P.getInstance().getLogger().info(
                    "‚ùå C√≥digo de verifica√ß√£o inv√°lido para " + playerName + " (c√≥digo: " + verifyCode + ")"
                );
                return false;
            }
            
        } catch (SQLException e) {
            PrimeLeagueP2P.getInstance().getLogger().severe("Erro SQL ao verificar c√≥digo: " + e.getMessage());
            return false;
        } finally {
            // Fechar recursos
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                PrimeLeagueP2P.getInstance().getLogger().warning("Erro ao fechar conex√£o: " + e.getMessage());
            }
        }
    }

    /**
     * Verifica a assinatura do jogador e kicka se n√£o tiver assinatura ativa.
     * 
     * @param player Jogador para verificar
     */
    private void checkSubscriptionAndKickIfNeeded(final Player player) {
        // Executar verifica√ß√£o de assinatura de forma ass√≠ncrona
        Bukkit.getScheduler().runTaskAsynchronously(PrimeLeagueP2P.getInstance(), new Runnable() {
            @Override
            public void run() {
                try {
                    // Obter UUID can√¥nico do jogador
                    final UUID canonicalUuid = br.com.primeleague.core.util.UUIDUtils.offlineUUIDFromName(player.getName());
                    
                    // Verificar assinatura
                    final AccountStatus status = checkAccountSubscription(canonicalUuid);
                    
                    // Retornar resultado para a thread principal
                    Bukkit.getScheduler().runTask(PrimeLeagueP2P.getInstance(), new Runnable() {
                        @Override
                        public void run() {
                            switch (status.getStatus()) {
                                case ACTIVE:
                                    // Assinatura ativa - permitir acesso
                                    player.sendMessage("");
                                    player.sendMessage("¬ßa¬ßlüéâ VERIFICA√á√ÉO CONCLU√çDA COM SUCESSO!");
                                    player.sendMessage("");
                                    player.sendMessage("¬ßf‚úÖ Sua conta Discord foi vinculada!");
                                    player.sendMessage("¬ßf‚úÖ Sua assinatura est√° ativa!");
                                    player.sendMessage("¬ßfüéÆ Bem-vindo ao Prime League!");
                                    player.sendMessage("");
                                    player.sendMessage("¬ßaüîÑ Voc√™ pode jogar normalmente!");
                                    break;
                                    
                                case EXPIRED:
                                    // Assinatura expirada - kickar
                                    player.sendMessage("");
                                    player.sendMessage("¬ßa¬ßl‚úÖ VERIFICA√á√ÉO CONCLU√çDA!");
                                    player.sendMessage("");
                                    player.sendMessage("¬ßf‚úÖ Sua conta Discord foi vinculada!");
                                    player.sendMessage("¬ßc‚ùå Sua assinatura expirou.");
                                    player.sendMessage("");
                                    player.sendMessage("¬ß6¬ßlüìã RENOVA√á√ÉO NECESS√ÅRIA:");
                                    player.sendMessage("¬ßfPara continuar jogando, renove sua assinatura.");
                                    player.sendMessage("");
                                    player.sendMessage("¬ßeüíé Como renovar:");
                                    player.sendMessage("¬ß7‚Ä¢ V√° para o Discord: ¬ßfdiscord.gg/primeleague");
                                    player.sendMessage("¬ß7‚Ä¢ Use o comando ¬ßa/assinatura ¬ß7no Discord");
                                    player.sendMessage("¬ß7‚Ä¢ Escolha seu plano e complete o pagamento");
                                    player.sendMessage("");
                                    
                                                                         // Kick ap√≥s 3 segundos
                                     Bukkit.getScheduler().runTaskLater(PrimeLeagueP2P.getInstance(), new Runnable() {
                                         @Override
                                         public void run() {
                                             player.kickPlayer("¬ßa‚úÖ Verifica√ß√£o Conclu√≠da!\n\n" +
                                                              "¬ßfConta Discord vinculada!\n" +
                                                              "¬ßc‚ùå Assinatura Expirada\n\n" +
                                                              "¬ßeüíé Renove: discord.gg/primeleague\n" +
                                                              "¬ßeüíé Comando: /assinatura");
                                         }
                                     }, 60L); // 3 segundos
                                    break;
                                    
                                case NEVER_SUBSCRIBED:
                                    // Nunca teve assinatura - kickar
                                    player.sendMessage("");
                                    player.sendMessage("¬ßa¬ßl‚úÖ VERIFICA√á√ÉO CONCLU√çDA!");
                                    player.sendMessage("");
                                    player.sendMessage("¬ßf‚úÖ Sua conta Discord foi vinculada!");
                                    player.sendMessage("¬ßc‚ùå Voc√™ n√£o possui assinatura ativa.");
                                    player.sendMessage("");
                                    player.sendMessage("¬ß6¬ßlüìã ASSINATURA NECESS√ÅRIA:");
                                    player.sendMessage("¬ßfPara acessar o servidor, adquira uma assinatura.");
                                    player.sendMessage("");
                                    player.sendMessage("¬ßeüíé Como adquirir:");
                                    player.sendMessage("¬ß7‚Ä¢ V√° para o Discord: ¬ßfdiscord.gg/primeleague");
                                    player.sendMessage("¬ß7‚Ä¢ Use o comando ¬ßa/assinatura ¬ß7no Discord");
                                    player.sendMessage("¬ß7‚Ä¢ Escolha seu plano e complete o pagamento");
                                    player.sendMessage("");
                                    
                                                                         // Kick ap√≥s 3 segundos
                                     Bukkit.getScheduler().runTaskLater(PrimeLeagueP2P.getInstance(), new Runnable() {
                                         @Override
                                         public void run() {
                                             player.kickPlayer("¬ßa‚úÖ Verifica√ß√£o Conclu√≠da!\n\n" +
                                                              "¬ßfConta Discord vinculada!\n" +
                                                              "¬ßc‚ùå Assinatura Necess√°ria\n\n" +
                                                              "¬ßeüíé Adquira: discord.gg/primeleague\n" +
                                                              "¬ßeüíé Comando: /assinatura");
                                         }
                                     }, 60L); // 3 segundos
                                    break;
                                    
                                default:
                                    // Status desconhecido - kickar por seguran√ßa
                                    player.sendMessage("");
                                    player.sendMessage("¬ßa¬ßl‚úÖ VERIFICA√á√ÉO CONCLU√çDA!");
                                    player.sendMessage("");
                                    player.sendMessage("¬ßf‚úÖ Sua conta Discord foi vinculada!");
                                    player.sendMessage("¬ßc‚ùå Erro ao verificar assinatura.");
                                    player.sendMessage("");
                                    player.sendMessage("¬ß6¬ßlüìã CONTATE A ADMINISTRA√á√ÉO:");
                                    player.sendMessage("¬ßfEntre em contato no Discord para resolver.");
                                    player.sendMessage("");
                                    
                                                                         // Kick ap√≥s 3 segundos
                                     Bukkit.getScheduler().runTaskLater(PrimeLeagueP2P.getInstance(), new Runnable() {
                                         @Override
                                         public void run() {
                                             player.kickPlayer("¬ßa‚úÖ Verifica√ß√£o Conclu√≠da!\n\n" +
                                                              "¬ßfConta Discord vinculada!\n" +
                                                              "¬ßc‚ùå Erro na Verifica√ß√£o\n\n" +
                                                              "¬ßeüíé Contato: discord.gg/primeleague");
                                         }
                                     }, 60L); // 3 segundos
                                    break;
                            }
                        }
                    });
                    
                } catch (Exception e) {
                    // Log do erro
                    PrimeLeagueP2P.getInstance().getLogger().severe("Erro ao verificar assinatura: " + e.getMessage());
                    e.printStackTrace();
                    
                                         // Kick por seguran√ßa em caso de erro
                     Bukkit.getScheduler().runTask(PrimeLeagueP2P.getInstance(), new Runnable() {
                         @Override
                         public void run() {
                             player.kickPlayer("¬ßc‚ùå Erro na Verifica√ß√£o\n\n" +
                                              "¬ßfErro ao verificar assinatura.\n" +
                                              "¬ßeüíé Contato: discord.gg/primeleague");
                         }
                     });
                }
            }
        });
    }
    
    /**
     * Verifica o status de assinatura de uma conta.
     * 
     * @param playerUuid UUID do jogador
     * @return AccountStatus com informa√ß√µes da assinatura
     */
    private AccountStatus checkAccountSubscription(UUID playerUuid) {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        
        try {
            // Obter conex√£o via API do Core
            conn = br.com.primeleague.core.PrimeLeagueCore.getInstance().getDataManager().getConnection();
            if (conn == null) {
                return new AccountStatus(SubscriptionStatus.NEVER_SUBSCRIBED, 0);
            }
            
            // 1. Verificar se est√° vinculado ao Discord
            String checkLinkSql = "SELECT dl.verified FROM discord_links dl JOIN player_data pd ON dl.player_id = pd.player_id WHERE pd.uuid = ? LIMIT 1";
            ps = conn.prepareStatement(checkLinkSql);
            ps.setString(1, playerUuid.toString());
            rs = ps.executeQuery();
            
            if (!rs.next()) {
                // N√£o vinculado
                return new AccountStatus(SubscriptionStatus.NEVER_SUBSCRIBED, 0);
            }
            
            boolean isVerified = rs.getBoolean("verified");
            rs.close();
            ps.close();
            
            if (!isVerified) {
                // Vinculado mas n√£o verificado
                return new AccountStatus(SubscriptionStatus.NEVER_SUBSCRIBED, 0);
            }
            
            // 2. Verificar assinatura compartilhada via Discord ID
            // Primeiro, obter o Discord ID do jogador
            String getDiscordIdSql = "SELECT dl.discord_id FROM discord_links dl JOIN player_data pd ON dl.player_id = pd.player_id WHERE pd.uuid = ? AND dl.verified = TRUE LIMIT 1";
            ps = conn.prepareStatement(getDiscordIdSql);
            ps.setString(1, playerUuid.toString());
            rs = ps.executeQuery();
            
            if (!rs.next()) {
                // Jogador n√£o vinculado ao Discord
                return new AccountStatus(SubscriptionStatus.NEVER_SUBSCRIBED, 0);
            }
            
            String discordId = rs.getString("discord_id");
            rs.close();
            ps.close();
            
            // Agora verificar a assinatura compartilhada
            String checkSubSql = "SELECT subscription_expires_at FROM discord_users WHERE discord_id = ?";
            ps = conn.prepareStatement(checkSubSql);
            ps.setString(1, discordId);
            rs = ps.executeQuery();
            
            if (!rs.next()) {
                // Discord ID n√£o tem assinatura
                return new AccountStatus(SubscriptionStatus.NEVER_SUBSCRIBED, 0);
            }
            
            java.sql.Timestamp expiresAt = rs.getTimestamp("subscription_expires_at");
            
            if (expiresAt == null) {
                // Nunca teve assinatura
                return new AccountStatus(SubscriptionStatus.NEVER_SUBSCRIBED, 0);
            }
            
            // Calcular dias restantes
            long currentTime = System.currentTimeMillis();
            long expiresTime = expiresAt.getTime();
            
            if (expiresTime > currentTime) {
                // Assinatura ativa
                int daysRemaining = (int) ((expiresTime - currentTime) / (1000 * 60 * 60 * 24));
                return new AccountStatus(SubscriptionStatus.ACTIVE, daysRemaining);
            } else {
                // Assinatura expirada
                return new AccountStatus(SubscriptionStatus.EXPIRED, 0);
            }
            
        } catch (Exception e) {
            PrimeLeagueP2P.getInstance().getLogger().severe("Erro ao verificar assinatura para " + playerUuid + ": " + e.getMessage());
            return new AccountStatus(SubscriptionStatus.NEVER_SUBSCRIBED, 0);
            
        } finally {
            // Cleanup de recursos
            try {
                if (rs != null) rs.close();
                if (ps != null) ps.close();
                if (conn != null) conn.close();
            } catch (Exception e) {
                // Silenciar erros de cleanup
            }
        }
    }
    
    /**
     * Enum para status de assinatura.
     */
    private enum SubscriptionStatus {
        ACTIVE,
        EXPIRED,
        NEVER_SUBSCRIBED
    }
    
    /**
     * Classe para armazenar informa√ß√µes de status da conta.
     */
    private static class AccountStatus {
        private final SubscriptionStatus status;
        private final int daysRemaining;
        
        public AccountStatus(SubscriptionStatus status, int daysRemaining) {
            this.status = status;
            this.daysRemaining = daysRemaining;
        }
        
        public SubscriptionStatus getStatus() {
            return status;
        }
        
        public int getDaysRemaining() {
            return daysRemaining;
        }
    }

    /**
     * Notifica o Discord sobre a verifica√ß√£o bem-sucedida e autoriza automaticamente o IP.
     * 
     * @param playerName Nome do jogador verificado
     * @param playerIp IP do jogador (usado durante verifica√ß√£o)
     */
    private void notifyDiscordSuccess(String playerName, String playerIp) {
        try {
            Connection connection = PrimeLeagueAPI.getDataManager().getConnection();
            
            // 1. Criar notifica√ß√£o para o Discord
            String sql = "INSERT INTO server_notifications (action_type, payload) VALUES (?, ?)";
            
            Map<String, Object> payload = new HashMap<>();
            payload.put("player_name", playerName);
            payload.put("verified_at", System.currentTimeMillis());
            payload.put("verification_ip", playerIp); // Armazenar IP da verifica√ß√£o
            payload.put("status", "success");
            
            PreparedStatement stmt = connection.prepareStatement(sql);
            stmt.setString(1, "DISCORD_VERIFY_SUCCESS");
            stmt.setString(2, new com.google.gson.Gson().toJson(payload));
            
            stmt.executeUpdate();
            stmt.close();
            
            // 2. AUTORIZAR AUTOMATICAMENTE O IP ESPEC√çFICO USADO NA VERIFICA√á√ÉO
            String playerSql = "SELECT pd.uuid, pd.player_id FROM player_data pd WHERE pd.name = ?";
            stmt = connection.prepareStatement(playerSql);
            stmt.setString(1, playerName);
            
            java.sql.ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                String playerUuid = rs.getString("uuid");
                int playerId = rs.getInt("player_id");
                
                // Autorizar especificamente o IP usado na verifica√ß√£o
                String autoAuthSql = "INSERT INTO player_authorized_ips (player_id, ip_address, description, authorized_at) " +
                                   "VALUES (?, ?, ?, NOW()) " +
                                   "ON DUPLICATE KEY UPDATE authorized_at = NOW()";
                
                PreparedStatement authStmt = connection.prepareStatement(autoAuthSql);
                authStmt.setInt(1, playerId);
                authStmt.setString(2, playerIp); // IP espec√≠fico da verifica√ß√£o
                authStmt.setString(3, "Autoriza√ß√£o autom√°tica ap√≥s verifica√ß√£o Discord");
                
                authStmt.executeUpdate();
                authStmt.close();
                
                PrimeLeagueP2P.getInstance().getLogger().info(
                    "IP " + playerIp + " autorizado automaticamente para " + playerName + " ap√≥s verifica√ß√£o bem-sucedida"
                );
            }
            
            rs.close();
            stmt.close();
            connection.close();
            
        } catch (SQLException e) {
            PrimeLeagueP2P.getInstance().getLogger().warning("Erro ao notificar Discord e autorizar IP: " + e.getMessage());
        }
    }
}
