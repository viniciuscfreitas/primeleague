package br.com.primeleague.p2p.managers;

import br.com.primeleague.p2p.PrimeLeagueP2P;
import org.bukkit.Location;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.event.entity.FoodLevelChangeEvent;
import org.bukkit.event.player.AsyncPlayerChatEvent;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.player.PlayerPickupItemEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

/**
 * Gerenciador de Estado de Limbo para jogadores pendentes de verifica√ß√£o.
 * 
 * O limbo √© um estado especial onde o jogador:
 * - √â teleportado para uma √°rea segura
 * - Tem suas a√ß√µes restringidas
 * - S√≥ pode usar comandos espec√≠ficos (/verify, /ajuda, /discord)
 * - N√£o pode se mover, quebrar blocos, interagir, etc.
 * 
 * @author PrimeLeague Team
 * @version 1.0.0
 */
public final class LimboManager implements Listener {

    private final PrimeLeagueP2P plugin;
    private final Set<UUID> playersInLimbo;
    private final Set<String> allowedCommands;
    
    // Configura√ß√µes do limbo (ser√£o carregadas do config.yml)
    private Location limboLocation;
    private boolean limboTeleportEnabled;

    public LimboManager() {
        this.plugin = PrimeLeagueP2P.getInstance();
        this.playersInLimbo = new HashSet<UUID>();
        this.allowedCommands = new HashSet<String>(Arrays.asList(
            "verify", "ajuda", "help", "discord"
        ));
        
        // Registrar este manager como listener
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        
        // Carregar configura√ß√µes
        loadLimboConfiguration();
    }

    /**
     * Carrega as configura√ß√µes do limbo do config.yml.
     */
    private void loadLimboConfiguration() {
        try {
            // Verificar se teleporte para limbo est√° habilitado
            limboTeleportEnabled = plugin.getConfig().getBoolean("limbo.teleport_enabled", true);
            
            if (limboTeleportEnabled) {
                // Carregar coordenadas do limbo
                String worldName = plugin.getConfig().getString("limbo.world", "world");
                double x = plugin.getConfig().getDouble("limbo.x", 0.0);
                double y = plugin.getConfig().getDouble("limbo.y", 100.0);
                double z = plugin.getConfig().getDouble("limbo.z", 0.0);
                float yaw = (float) plugin.getConfig().getDouble("limbo.yaw", 0.0);
                float pitch = (float) plugin.getConfig().getDouble("limbo.pitch", 0.0);
                
                // Tentar obter o mundo
                if (plugin.getServer().getWorld(worldName) != null) {
                    limboLocation = new Location(plugin.getServer().getWorld(worldName), x, y, z, yaw, pitch);
                    plugin.getLogger().info("Localiza√ß√£o do limbo carregada: " + worldName + " (" + x + ", " + y + ", " + z + ")");
                } else {
                    plugin.getLogger().warning("Mundo do limbo n√£o encontrado: " + worldName + " - Teleporte desabilitado");
                    limboTeleportEnabled = false;
                }
            }
            
            // Carregar comandos permitidos adicionais
            if (plugin.getConfig().contains("limbo.allowed_commands")) {
                for (String cmd : plugin.getConfig().getStringList("limbo.allowed_commands")) {
                    allowedCommands.add(cmd.toLowerCase());
                }
            }
            
        } catch (Exception e) {
            plugin.getLogger().severe("Erro ao carregar configura√ß√£o do limbo: " + e.getMessage());
            e.printStackTrace();
            limboTeleportEnabled = false;
        }
    }

    /**
     * Coloca um jogador em estado de limbo.
     */
    public void putPlayerInLimbo(Player player) {
        UUID playerUuid = player.getUniqueId();
        
        if (playersInLimbo.contains(playerUuid)) {
            return; // Jogador j√° est√° em limbo
        }
        
        // Adicionar √† lista de jogadores em limbo
        playersInLimbo.add(playerUuid);
        
        // Teleportar para o limbo se configurado
        if (limboTeleportEnabled && limboLocation != null) {
            player.teleport(limboLocation);
        }
        
        // Enviar mensagens explicativas
        sendLimboMessages(player);
        
        plugin.getLogger().info("Jogador " + player.getName() + " colocado em estado de limbo");
    }

    /**
     * Remove um jogador do estado de limbo.
     */
    public void removePlayerFromLimbo(UUID playerUuid) {
        if (playersInLimbo.remove(playerUuid)) {
            plugin.getLogger().info("Jogador removido do estado de limbo: " + playerUuid);
        }
    }

    /**
     * Verifica se um jogador est√° em limbo.
     */
    public boolean isPlayerInLimbo(UUID playerUuid) {
        return playersInLimbo.contains(playerUuid);
    }

    /**
     * Verifica se um jogador est√° em limbo (vers√£o com Player).
     */
    public boolean isPlayerInLimbo(Player player) {
        return isPlayerInLimbo(player.getUniqueId());
    }

    /**
     * Envia mensagens explicativas para o jogador em limbo.
     */
    private void sendLimboMessages(Player player) {
        player.sendMessage("");
        player.sendMessage("¬ße¬ßl‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
        player.sendMessage("¬ßa¬ßl                          üîê VERIFICA√á√ÉO NECESS√ÅRIA");
        player.sendMessage("");
        player.sendMessage("¬ßfOl√°, ¬ßa" + player.getName() + "¬ßf! Voc√™ precisa verificar sua conta.");
        player.sendMessage("");
        player.sendMessage("¬ße1. ¬ßfSe voc√™ ainda n√£o se registrou:");
        player.sendMessage("   ¬ß7Digite ¬ßa/registrar " + player.getName() + " ¬ß7no Discord");
        player.sendMessage("");
        player.sendMessage("¬ße2. ¬ßfSe voc√™ j√° se registrou:");
        player.sendMessage("   ¬ß7Digite ¬ßa/verify <c√≥digo> ¬ß7aqui no servidor");
        player.sendMessage("");
        player.sendMessage("¬ß6üí° ¬ßfComandos dispon√≠veis: ¬ßa/verify¬ßf, ¬ßa/ajuda¬ßf, ¬ßa/discord");
        player.sendMessage("");
        player.sendMessage("¬ßc‚ö† ¬ßfSuas a√ß√µes est√£o limitadas at√© completar a verifica√ß√£o.");
        player.sendMessage("¬ße¬ßl‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨");
        player.sendMessage("");
    }

    /**
     * Envia mensagem de a√ß√£o n√£o permitida.
     */
    private void sendRestrictedActionMessage(Player player) {
        player.sendMessage("¬ßcüö´ A√ß√£o n√£o permitida durante a verifica√ß√£o!");
        player.sendMessage("¬ßeComplete a verifica√ß√£o com ¬ßa/verify <c√≥digo> ¬ßepara continuar.");
    }

    // ========================================================================
    // EVENT HANDLERS - Restringem a√ß√µes de jogadores em limbo
    // ========================================================================

    /**
     * Impede jogadores em limbo de se moverem.
     */
    @EventHandler(priority = EventPriority.HIGHEST)
    public void onPlayerMove(PlayerMoveEvent event) {
        if (isPlayerInLimbo(event.getPlayer())) {
            // Permitir apenas rota√ß√£o, n√£o movimento
            Location from = event.getFrom();
            Location to = event.getTo();
            
            if (from.getX() != to.getX() || from.getY() != to.getY() || from.getZ() != to.getZ()) {
                event.setTo(from);
                // N√£o enviar mensagem a cada movimento para evitar spam
            }
        }
    }

    /**
     * Impede jogadores em limbo de quebrar blocos.
     */
    @EventHandler(priority = EventPriority.HIGHEST)
    public void onBlockBreak(BlockBreakEvent event) {
        if (isPlayerInLimbo(event.getPlayer())) {
            event.setCancelled(true);
            sendRestrictedActionMessage(event.getPlayer());
        }
    }

    /**
     * Impede jogadores em limbo de colocar blocos.
     */
    @EventHandler(priority = EventPriority.HIGHEST)
    public void onBlockPlace(BlockPlaceEvent event) {
        if (isPlayerInLimbo(event.getPlayer())) {
            event.setCancelled(true);
            sendRestrictedActionMessage(event.getPlayer());
        }
    }

    /**
     * Impede jogadores em limbo de interagir com blocos/entidades.
     */
    @EventHandler(priority = EventPriority.HIGHEST)
    public void onPlayerInteract(PlayerInteractEvent event) {
        if (isPlayerInLimbo(event.getPlayer())) {
            event.setCancelled(true);
            sendRestrictedActionMessage(event.getPlayer());
        }
    }

    /**
     * Impede jogadores em limbo de dropar itens.
     */
    @EventHandler(priority = EventPriority.HIGHEST)
    public void onPlayerDropItem(PlayerDropItemEvent event) {
        if (isPlayerInLimbo(event.getPlayer())) {
            event.setCancelled(true);
            sendRestrictedActionMessage(event.getPlayer());
        }
    }

    /**
     * Impede jogadores em limbo de pegar itens.
     */
    @EventHandler(priority = EventPriority.HIGHEST)
    public void onPlayerPickupItem(PlayerPickupItemEvent event) {
        if (isPlayerInLimbo(event.getPlayer())) {
            event.setCancelled(true);
        }
    }

    /**
     * Impede jogadores em limbo de tomar dano.
     */
    @EventHandler(priority = EventPriority.HIGHEST)
    public void onEntityDamage(EntityDamageEvent event) {
        if (event.getEntity() instanceof Player) {
            Player player = (Player) event.getEntity();
            if (isPlayerInLimbo(player)) {
                event.setCancelled(true);
            }
        }
    }

    /**
     * Impede jogadores em limbo de perder fome.
     */
    @EventHandler(priority = EventPriority.HIGHEST)
    public void onFoodLevelChange(FoodLevelChangeEvent event) {
        if (event.getEntity() instanceof Player) {
            Player player = (Player) event.getEntity();
            if (isPlayerInLimbo(player)) {
                event.setCancelled(true);
            }
        }
    }

    /**
     * Impede jogadores em limbo de usar chat p√∫blico.
     */
    @EventHandler(priority = EventPriority.HIGHEST)
    public void onAsyncPlayerChat(AsyncPlayerChatEvent event) {
        if (isPlayerInLimbo(event.getPlayer())) {
            event.setCancelled(true);
            event.getPlayer().sendMessage("¬ßcüö´ Chat desabilitado durante a verifica√ß√£o!");
            event.getPlayer().sendMessage("¬ßeUse ¬ßa/verify <c√≥digo> ¬ßepara completar a verifica√ß√£o.");
        }
    }

    /**
     * Filtra comandos para jogadores em limbo - permite apenas comandos espec√≠ficos.
     */
    @EventHandler(priority = EventPriority.HIGHEST)
    public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event) {
        if (isPlayerInLimbo(event.getPlayer())) {
            String command = event.getMessage().toLowerCase();
            
            // Remover a barra inicial e pegar apenas o comando
            if (command.startsWith("/")) {
                command = command.substring(1);
            }
            
            // Verificar se √© um comando permitido
            String[] parts = command.split(" ");
            String baseCommand = parts[0];
            
            if (!allowedCommands.contains(baseCommand)) {
                event.setCancelled(true);
                event.getPlayer().sendMessage("¬ßcüö´ Comando n√£o permitido durante a verifica√ß√£o!");
                event.getPlayer().sendMessage("¬ßeComandos dispon√≠veis: ¬ßa/verify¬ßf, ¬ßa/ajuda¬ßf, ¬ßa/discord");
            }
        }
    }

    /**
     * Remove jogador da lista quando sair do servidor.
     */
    @EventHandler
    public void onPlayerQuit(PlayerQuitEvent event) {
        removePlayerFromLimbo(event.getPlayer().getUniqueId());
    }

    /**
     * Obt√©m estat√≠sticas do limbo para monitoramento.
     */
    public int getPlayersInLimboCount() {
        return playersInLimbo.size();
    }

    /**
     * Limpa a lista de jogadores em limbo (√∫til para recarregar configura√ß√µes).
     */
    public void clearLimboList() {
        playersInLimbo.clear();
        plugin.getLogger().info("Lista de jogadores em limbo limpa");
    }
}
