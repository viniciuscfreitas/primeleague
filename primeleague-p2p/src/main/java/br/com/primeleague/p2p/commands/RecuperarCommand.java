package br.com.primeleague.p2p.commands;

import br.com.primeleague.core.api.PrimeLeagueAPI;
import br.com.primeleague.core.managers.DataManager;
import org.bukkit.Bukkit;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.plugin.java.JavaPlugin;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.UUID;

/**
 * Comando para recupera√ß√£o de conta in-game.
 * 
 * Este comando permite aos jogadores iniciar o processo de recupera√ß√£o
 * de conta quando n√£o conseguem acessar o Discord.
 * 
 * @author PrimeLeague Team
 * @version 1.0.0
 */
public class RecuperarCommand implements CommandExecutor {

    private final JavaPlugin plugin;
    private final String API_URL = "http://localhost:8080";
    private final String API_TOKEN = "primeleague_api_token_2024";

    public RecuperarCommand(JavaPlugin plugin) {
        this.plugin = plugin;
    }

    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        if (!(sender instanceof Player)) {
            sender.sendMessage("¬ßc‚ùå Este comando s√≥ pode ser usado por jogadores.");
            return true;
        }

        Player player = (Player) sender;
        String playerName = player.getName();
        String playerIp = player.getAddress().getAddress().getHostAddress();

        // Verificar se o jogador j√° est√° em processo de recupera√ß√£o
        if (isPlayerInRecovery(playerName)) {
            player.sendMessage("¬ße‚ö†Ô∏è Voc√™ j√° possui um processo de recupera√ß√£o ativo.");
            player.sendMessage("¬ß7Use o c√≥digo enviado no Discord para finalizar a recupera√ß√£o.");
            return true;
        }

        // Verificar se o jogador possui v√≠nculo Discord
        if (!hasDiscordLink(playerName)) {
            player.sendMessage("¬ßc‚ùå Voc√™ n√£o possui uma conta vinculada ao Discord.");
            player.sendMessage("¬ß7Use ¬ßf/registrar ¬ß7no Discord para criar um v√≠nculo primeiro.");
            return true;
        }

        // Iniciar processo de recupera√ß√£o
        try {
            boolean success = initiateRecovery(playerName, playerIp);
            
            if (success) {
                // Kickar o jogador com instru√ß√µes
                kickPlayerWithInstructions(player);
                
                // Log da a√ß√£o
                plugin.getLogger().info("[RECUPERAR] Jogador " + playerName + " iniciou processo de recupera√ß√£o");
                
            } else {
                player.sendMessage("¬ßc‚ùå Erro ao iniciar processo de recupera√ß√£o.");
                player.sendMessage("¬ß7Tente novamente em alguns minutos ou contate um administrador.");
            }
            
        } catch (Exception e) {
            plugin.getLogger().severe("[RECUPERAR] Erro ao processar recupera√ß√£o para " + playerName + ": " + e.getMessage());
            player.sendMessage("¬ßc‚ùå Erro interno do sistema. Contate um administrador.");
        }

        return true;
    }

    /**
     * Verifica se o jogador j√° est√° em processo de recupera√ß√£o.
     */
    private boolean isPlayerInRecovery(String playerName) {
        try {
            DataManager dataManager = PrimeLeagueAPI.getDataManager();
            Integer playerId = dataManager.getPlayerIdByName(playerName);
            
            if (playerId == null) {
                return false;
            }

            // Verificar se h√° c√≥digos de recupera√ß√£o ativos
            String discordId = dataManager.getDiscordIdByPlayerId(playerId);
            if (discordId == null) {
                return false;
            }

            // Fazer requisi√ß√£o para verificar status
            String response = makeApiRequest("GET", "/api/v1/recovery/status/" + discordId, null);
            
            if (response != null && response.contains("\"hasActiveBackupCodes\":true")) {
                return true;
            }

        } catch (Exception e) {
            plugin.getLogger().warning("[RECUPERAR] Erro ao verificar status de recupera√ß√£o: " + e.getMessage());
        }

        return false;
    }

    /**
     * Verifica se o jogador possui v√≠nculo Discord ativo.
     */
    private boolean hasDiscordLink(String playerName) {
        try {
            DataManager dataManager = PrimeLeagueAPI.getDataManager();
            Integer playerId = dataManager.getPlayerIdByName(playerName);
            
            if (playerId == null) {
                return false;
            }

            String discordId = dataManager.getDiscordIdByPlayerId(playerId);
            return discordId != null;

        } catch (Exception e) {
            plugin.getLogger().warning("[RECUPERAR] Erro ao verificar v√≠nculo Discord: " + e.getMessage());
            return false;
        }
    }

    /**
     * Inicia o processo de recupera√ß√£o gerando c√≥digos de backup.
     */
    private boolean initiateRecovery(String playerName, String playerIp) {
        try {
            DataManager dataManager = PrimeLeagueAPI.getDataManager();
            Integer playerId = dataManager.getPlayerIdByName(playerName);
            
            if (playerId == null) {
                return false;
            }

            String discordId = dataManager.getDiscordIdByPlayerId(playerId);
            if (discordId == null) {
                return false;
            }

            // Gerar c√≥digos de backup via API
            String payload = String.format(
                "{\"discordId\":\"%s\",\"ipAddress\":\"%s\"}",
                discordId, playerIp
            );

            String response = makeApiRequest("POST", "/api/v1/recovery/backup/generate", payload);
            
            if (response != null && response.contains("\"success\":true")) {
                // Marcar jogador como PENDING_RELINK
                dataManager.updateDiscordLinkStatus(discordId, "PENDING_RELINK");
                return true;
            }

        } catch (Exception e) {
            plugin.getLogger().severe("[RECUPERAR] Erro ao gerar c√≥digos: " + e.getMessage());
        }

        return false;
    }

    /**
     * Kicka o jogador com instru√ß√µes de recupera√ß√£o.
     */
    private void kickPlayerWithInstructions(Player player) {
        String kickMessage = String.join("\n",
            "¬ßc¬ßlüõ°Ô∏è PROCESSO DE RECUPERA√á√ÉO INICIADO",
            "",
            "¬ß7Para finalizar a recupera√ß√£o da sua conta:",
            "",
            "¬ße1. ¬ß7Acesse o Discord do servidor",
            "¬ße2. ¬ß7Use o comando ¬ßf/recuperacao ¬ß7para gerar c√≥digos",
            "¬ße3. ¬ß7Use o comando ¬ßf/vincular <seu_nickname> <codigo> ¬ß7para re-vincular",
            "",
            "¬ßc‚ö†Ô∏è IMPORTANTE:",
            "¬ß7‚Ä¢ Os c√≥digos s√£o v√°lidos por 30 dias",
            "¬ß7‚Ä¢ Guarde-os em local seguro",
            "¬ß7‚Ä¢ Nunca compartilhe com ningu√©m",
            "",
            "¬ß7Ap√≥s re-vincular, voc√™ poder√° entrar novamente no servidor.",
            "",
            "¬ß7Em caso de d√∫vidas, contate um administrador."
        );

        player.kickPlayer(kickMessage);
    }

    /**
     * Faz uma requisi√ß√£o HTTP para a API Core.
     */
    private String makeApiRequest(String method, String endpoint, String payload) {
        try {
            URL url = new URL(API_URL + endpoint);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            
            connection.setRequestMethod(method);
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setRequestProperty("Authorization", "Bearer " + API_TOKEN);
            connection.setDoOutput(true);
            connection.setConnectTimeout(5000);
            connection.setReadTimeout(5000);

            // Enviar payload se fornecido
            if (payload != null) {
                try (OutputStream os = connection.getOutputStream()) {
                    byte[] input = payload.getBytes(StandardCharsets.UTF_8);
                    os.write(input, 0, input.length);
                }
            }

            // Ler resposta
            int responseCode = connection.getResponseCode();
            if (responseCode >= 200 && responseCode < 300) {
                try (BufferedReader br = new BufferedReader(
                        new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8))) {
                    StringBuilder response = new StringBuilder();
                    String responseLine;
                    while ((responseLine = br.readLine()) != null) {
                        response.append(responseLine.trim());
                    }
                    return response.toString();
                }
            } else {
                plugin.getLogger().warning("[RECUPERAR] API retornou c√≥digo " + responseCode + " para " + endpoint);
            }

        } catch (Exception e) {
            plugin.getLogger().severe("[RECUPERAR] Erro na requisi√ß√£o HTTP: " + e.getMessage());
        }

        return null;
    }
}
