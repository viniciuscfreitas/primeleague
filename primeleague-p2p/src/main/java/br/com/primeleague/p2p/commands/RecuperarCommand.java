package br.com.primeleague.p2p.commands;

import br.com.primeleague.core.api.PrimeLeagueAPI;
import br.com.primeleague.core.managers.DataManager;
import org.bukkit.Bukkit;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.plugin.java.JavaPlugin;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.UUID;

/**
 * Comando para recupera√ß√£o de conta in-game.
 * 
 * Este comando permite aos jogadores iniciar o processo de recupera√ß√£o
 * de conta quando n√£o conseguem acessar o Discord.
 * 
 * @author PrimeLeague Team
 * @version 1.0.0
 */
public class RecuperarCommand implements CommandExecutor {

    private final JavaPlugin plugin;
    private final String API_URL = "http://localhost:8080";
    private final String API_TOKEN = "primeleague_api_token_2024";

    public RecuperarCommand(JavaPlugin plugin) {
        this.plugin = plugin;
    }

    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        if (!(sender instanceof Player)) {
            sender.sendMessage("¬ßc‚ùå Este comando s√≥ pode ser usado por jogadores.");
            return true;
        }

        Player player = (Player) sender;
        String playerName = player.getName();
        String playerIp = player.getAddress().getAddress().getHostAddress();

        // Verificar se foi fornecido um c√≥digo de backup
        if (args.length != 1) {
            player.sendMessage("¬ßc‚ùå Uso correto: ¬ßf/recuperar <codigo_backup>");
            player.sendMessage("¬ß7Use um dos c√≥digos de backup que voc√™ salvou anteriormente.");
            return true;
        }

        String backupCode = args[0];

        // Validar formato do c√≥digo (8 caracteres alfanum√©ricos)
        if (!backupCode.matches("^[A-Z0-9]{8}$")) {
            player.sendMessage("¬ßc‚ùå C√≥digo inv√°lido. O c√≥digo deve ter 8 caracteres (letras e n√∫meros).");
            return true;
        }

        // Verificar se o jogador j√° est√° em processo de recupera√ß√£o
        if (isPlayerInRecovery(playerName)) {
            player.sendMessage("¬ße‚ö†Ô∏è Voc√™ j√° possui um processo de recupera√ß√£o ativo.");
            player.sendMessage("¬ß7Use o c√≥digo de re-vincula√ß√£o que apareceu no chat para finalizar.");
            return true;
        }

        // Processar recupera√ß√£o de emerg√™ncia
        try {
            boolean success = processEmergencyRecovery(playerName, backupCode, playerIp);
            
            if (success) {
                // Log da a√ß√£o
                plugin.getLogger().info("[RECUPERAR] Jogador " + playerName + " iniciou recupera√ß√£o de emerg√™ncia");
                
                // Mostrar c√≥digo de re-vincula√ß√£o no chat
                showRelinkCode(player);
                
            } else {
                player.sendMessage("¬ßc‚ùå C√≥digo de backup inv√°lido ou expirado.");
                player.sendMessage("¬ß7Verifique o c√≥digo e tente novamente.");
            }
            
        } catch (Exception e) {
            plugin.getLogger().severe("[RECUPERAR] Erro ao processar recupera√ß√£o para " + playerName + ": " + e.getMessage());
            player.sendMessage("¬ßc‚ùå Erro interno do sistema. Contate um administrador.");
        }

        return true;
    }

    /**
     * Verifica se o jogador j√° est√° em processo de recupera√ß√£o (PENDING_RELINK).
     */
    private boolean isPlayerInRecovery(String playerName) {
        try {
            DataManager dataManager = PrimeLeagueAPI.getDataManager();
            Integer playerId = dataManager.getPlayerIdByName(playerName);
            
            if (playerId == null) {
                return false;
            }

            String discordId = dataManager.getDiscordIdByPlayerId(playerId);
            if (discordId == null) {
                return false;
            }

            // Verificar se est√° em estado PENDING_RELINK
            String status = dataManager.getDiscordLinkStatus(discordId);
            return "PENDING_RELINK".equals(status);

        } catch (Exception e) {
            plugin.getLogger().warning("[RECUPERAR] Erro ao verificar status de recupera√ß√£o: " + e.getMessage());
        }

        return false;
    }

    /**
     * Processa a recupera√ß√£o de emerg√™ncia usando c√≥digo de backup.
     */
    private boolean processEmergencyRecovery(String playerName, String backupCode, String playerIp) {
        try {
            // Verificar o c√≥digo de backup via API
            String payload = String.format(
                "{\"playerName\":\"%s\",\"backupCode\":\"%s\",\"ipAddress\":\"%s\"}",
                playerName, backupCode, playerIp
            );

            String response = makeApiRequest("POST", "/api/v1/recovery/verify", payload);
            
            if (response != null && response.contains("\"success\":true")) {
                // C√≥digo v√°lido - marcar como PENDING_RELINK
                DataManager dataManager = PrimeLeagueAPI.getDataManager();
                Integer playerId = dataManager.getPlayerIdByName(playerName);
                
                if (playerId != null) {
                    String discordId = dataManager.getDiscordIdByPlayerId(playerId);
                    if (discordId != null) {
                        dataManager.updateDiscordLinkStatus(discordId, "PENDING_RELINK");
                        return true;
                    }
                }
            }

        } catch (Exception e) {
            plugin.getLogger().severe("[RECUPERAR] Erro ao processar recupera√ß√£o de emerg√™ncia: " + e.getMessage());
        }

        return false;
    }

    /**
     * Mostra o c√≥digo de re-vincula√ß√£o no chat do jogador.
     */
    private void showRelinkCode(Player player) {
        String playerName = player.getName();
        
        // Gerar novo c√≥digo de re-vincula√ß√£o
        try {
            DataManager dataManager = PrimeLeagueAPI.getDataManager();
            Integer playerId = dataManager.getPlayerIdByName(playerName);
            
            if (playerId != null) {
                String discordId = dataManager.getDiscordIdByPlayerId(playerId);
                if (discordId != null) {
                    // Gerar c√≥digo tempor√°rio de re-vincula√ß√£o
                    String relinkCode = generateRelinkCode();
                    
                    // Enviar mensagem no chat
                    player.sendMessage("¬ßa¬ßl‚úÖ RECUPERA√á√ÉO DE EMERG√äNCIA CONCLU√çDA!");
                    player.sendMessage("");
                    player.sendMessage("¬ßeüîë Seu c√≥digo de re-vincula√ß√£o √©: ¬ßf¬ßl" + relinkCode);
                    player.sendMessage("");
                    player.sendMessage("¬ß7üì± Use este c√≥digo no Discord:");
                    player.sendMessage("¬ß7üí¨ Comando: ¬ßf/vincular " + playerName + " " + relinkCode);
                    player.sendMessage("");
                    player.sendMessage("¬ßc‚ö†Ô∏è IMPORTANTE:");
                    player.sendMessage("¬ß7‚Ä¢ Este c√≥digo √© v√°lido por 24 horas");
                    player.sendMessage("¬ß7‚Ä¢ Use-o para re-vincular sua conta no Discord");
                    player.sendMessage("¬ß7‚Ä¢ Ap√≥s re-vincular, sua conta estar√° protegida novamente");
                    
                    // Log do c√≥digo gerado
                    plugin.getLogger().info("[RECUPERAR] C√≥digo de re-vincula√ß√£o gerado para " + playerName + ": " + relinkCode);
                }
            }
            
        } catch (Exception e) {
            plugin.getLogger().severe("[RECUPERAR] Erro ao gerar c√≥digo de re-vincula√ß√£o: " + e.getMessage());
            player.sendMessage("¬ßc‚ùå Erro ao gerar c√≥digo de re-vincula√ß√£o. Contate um administrador.");
        }
    }

    /**
     * Gera um c√≥digo tempor√°rio de re-vincula√ß√£o.
     */
    private String generateRelinkCode() {
        // Gerar c√≥digo de 8 caracteres alfanum√©ricos
        String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        StringBuilder code = new StringBuilder();
        java.util.Random random = new java.util.Random();
        
        for (int i = 0; i < 8; i++) {
            code.append(chars.charAt(random.nextInt(chars.length())));
        }
        
        return code.toString();
    }

    /**
     * Faz uma requisi√ß√£o HTTP para a API Core.
     */
    private String makeApiRequest(String method, String endpoint, String payload) {
        try {
            URL url = new URL(API_URL + endpoint);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            
            connection.setRequestMethod(method);
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setRequestProperty("Authorization", "Bearer " + API_TOKEN);
            connection.setDoOutput(true);
            connection.setConnectTimeout(5000);
            connection.setReadTimeout(5000);

            // Enviar payload se fornecido
            if (payload != null) {
                try (OutputStream os = connection.getOutputStream()) {
                    byte[] input = payload.getBytes(StandardCharsets.UTF_8);
                    os.write(input, 0, input.length);
                }
            }

            // Ler resposta
            int responseCode = connection.getResponseCode();
            if (responseCode >= 200 && responseCode < 300) {
                try (BufferedReader br = new BufferedReader(
                        new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8))) {
                    StringBuilder response = new StringBuilder();
                    String responseLine;
                    while ((responseLine = br.readLine()) != null) {
                        response.append(responseLine.trim());
                    }
                    return response.toString();
                }
            } else {
                plugin.getLogger().warning("[RECUPERAR] API retornou c√≥digo " + responseCode + " para " + endpoint);
            }

        } catch (Exception e) {
            plugin.getLogger().severe("[RECUPERAR] Erro na requisi√ß√£o HTTP: " + e.getMessage());
        }

        return null;
    }
}
